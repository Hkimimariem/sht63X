
SHT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b38  08004b38  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b40  08004b40  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000001e4  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000024c  2000024c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   000087fe  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d95  00000000  00000000  000288d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000968  00000000  00000000  0002a670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000724  00000000  00000000  0002afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000213b3  00000000  00000000  0002b6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c021  00000000  00000000  0004caaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4d25  00000000  00000000  00058ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002e20  00000000  00000000  0011d7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00120618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a40 	.word	0x08004a40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004a40 	.word	0x08004a40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <WriteValuesToFlash>:
#include "flash_memory.h"


void WriteValuesToFlash(uint32_t StartAddress, uint32_t tempData, uint32_t humiData)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  // Erase the flash memory page before writing
  //Flash_Erase(StartAddress);


  // Write temperature and humidity data
  Flash_Write(StartAddress, tempData);       // Write temperature data
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f000 f82d 	bl	8000e16 <Flash_Write>
  Flash_Write(StartAddress + 4, humiData);   // Write humidity data
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f827 	bl	8000e16 <Flash_Write>

	 // Move to the next address (4 bytes for temp + 4 bytes for humidity)

}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <Flash_Erase>:




void Flash_Erase(uint32_t StartPageAddress)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8000dd8:	f000 fe42 	bl	8001a60 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t PageError = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]

    // Fill EraseInit structure
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.Sector = FLASH_SECTOR_3;
 8000de4:	2303      	movs	r3, #3
 8000de6:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = 1;
 8000de8:	2301      	movs	r3, #1
 8000dea:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61fb      	str	r3, [r7, #28]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8000df0:	f107 0208 	add.w	r2, r7, #8
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 ff92 	bl	8001d24 <HAL_FLASHEx_Erase>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <Flash_Erase+0x3a>
    {
        // Error occurred while page erase.
        // Handle the error appropriately
        Error_Handler();
 8000e06:	f000 f97d 	bl	8001104 <Error_Handler>
    }

    HAL_FLASH_Lock();
 8000e0a:	f000 fe4b 	bl	8001aa4 <HAL_FLASH_Lock>
}
 8000e0e:	bf00      	nop
 8000e10:	3720      	adds	r7, #32
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <Flash_Write>:

void Flash_Write(uint32_t Address, uint32_t Data)
{
 8000e16:	b5b0      	push	{r4, r5, r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 8000e20:	f000 fe1e 	bl	8001a60 <HAL_FLASH_Unlock>

    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, Address, Data) != HAL_OK)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	2200      	movs	r2, #0
 8000e28:	461c      	mov	r4, r3
 8000e2a:	4615      	mov	r5, r2
 8000e2c:	4622      	mov	r2, r4
 8000e2e:	462b      	mov	r3, r5
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	2002      	movs	r0, #2
 8000e34:	f000 fdc0 	bl	80019b8 <HAL_FLASH_Program>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <Flash_Write+0x2c>
    {
        // Error occurred while writing data in Flash memory.
        // Handle the error appropriately
        Error_Handler();
 8000e3e:	f000 f961 	bl	8001104 <Error_Handler>
    }

    HAL_FLASH_Lock();
 8000e42:	f000 fe2f 	bl	8001aa4 <HAL_FLASH_Lock>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bdb0      	pop	{r4, r5, r7, pc}

08000e4e <ReadAllValuesFromFlash>:

void ReadAllValuesFromFlash(uint32_t StartAddress, uint32_t* tempData, uint32_t* humiData)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b089      	sub	sp, #36	; 0x24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	60f8      	str	r0, [r7, #12]
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
    uint32_t i = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    tempData[i]=0;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	4413      	add	r3, r2
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
    humiData[i]=0;
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
    while (1) {
        // Read temperature data
        uint32_t temp = *(__IO uint32_t*)(StartAddress );
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	61bb      	str	r3, [r7, #24]

        // Check for invalid or unwritten data (assuming 0xFFFFFFFF is unwritten flash data)
        if (temp == 0xFFFFFFFF)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e82:	d01a      	beq.n	8000eba <ReadAllValuesFromFlash+0x6c>
        {
            break;
        }

        tempData[i] = temp;
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	601a      	str	r2, [r3, #0]

        // Read humidity data
        uint32_t humi = *(__IO uint32_t*)(StartAddress +  4);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	3304      	adds	r3, #4
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	617b      	str	r3, [r7, #20]
        if (humi == 0xFFFFFFFF)
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9e:	d00e      	beq.n	8000ebe <ReadAllValuesFromFlash+0x70>
        {
            break;
        }

        humiData[i] = humi;
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	601a      	str	r2, [r3, #0]

        i++;
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	61fb      	str	r3, [r7, #28]
    	StartAddress += 8;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	3308      	adds	r3, #8
 8000eb6:	60fb      	str	r3, [r7, #12]
    while (1) {
 8000eb8:	e7dd      	b.n	8000e76 <ReadAllValuesFromFlash+0x28>
            break;
 8000eba:	bf00      	nop
 8000ebc:	e000      	b.n	8000ec0 <ReadAllValuesFromFlash+0x72>
            break;
 8000ebe:	bf00      	nop
    }


   }
 8000ec0:	bf00      	nop
 8000ec2:	3724      	adds	r7, #36	; 0x24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
	    float temperature;
	    float humidity;
	    uint16_t statusreg;
	    uint8_t data[6];

	    uint32_t startAddress = 0x0800C000;
 8000ed2:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <main+0xd0>)
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed6:	f000 fbf3 	bl	80016c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  SHT_init(&hi2c2);
 8000eda:	4831      	ldr	r0, [pc, #196]	; (8000fa0 <main+0xd4>)
 8000edc:	f000 f908 	bl	80010f0 <SHT_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f860 	bl	8000fa4 <SystemClock_Config>
  HAL_Delay(10000);
 8000ee4:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ee8:	f000 fc5c 	bl	80017a4 <HAL_Delay>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f8e6 	bl	80010bc <MX_GPIO_Init>
  MX_I2C2_Init();
 8000ef0:	f000 f8b6 	bl	8001060 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

 // ReadAllValuesFromFlash(startAddress, tempData, humiData );
  Flash_Erase(startAddress);
 8000ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ef6:	f7ff ff6b 	bl	8000dd0 <Flash_Erase>
ReadAllValuesFromFlash(startAddress, tempData, humiData);
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	6a39      	ldr	r1, [r7, #32]
 8000efe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f00:	f7ff ffa5 	bl	8000e4e <ReadAllValuesFromFlash>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 SHT_write(&hi2c2);
 8000f04:	4826      	ldr	r0, [pc, #152]	; (8000fa0 <main+0xd4>)
 8000f06:	f000 f93e 	bl	8001186 <SHT_write>
 SHT_read(&hi2c2, &temperature, &humidity);
 8000f0a:	f107 020c 	add.w	r2, r7, #12
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	4822      	ldr	r0, [pc, #136]	; (8000fa0 <main+0xd4>)
 8000f16:	f000 f94b 	bl	80011b0 <SHT_read>
  SHT_writestatus(&hi2c2);
 8000f1a:	4821      	ldr	r0, [pc, #132]	; (8000fa0 <main+0xd4>)
 8000f1c:	f000 fa0a 	bl	8001334 <SHT_writestatus>
  read_status_register(&statusreg,&hi2c2);
 8000f20:	f107 030a 	add.w	r3, r7, #10
 8000f24:	491e      	ldr	r1, [pc, #120]	; (8000fa0 <main+0xd4>)
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fa1a 	bl	8001360 <read_status_register>
heater_on(&hi2c2);
 8000f2c:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <main+0xd4>)
 8000f2e:	f000 f9dd 	bl	80012ec <heater_on>
  sensorData.fields.temp_data = (data[0] << 8) | (data[1] & 0xFF);
 8000f32:	793b      	ldrb	r3, [r7, #4]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	797b      	ldrb	r3, [r7, #5]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	82bb      	strh	r3, [r7, #20]
    sensorData.fields.temp_crc = data[2];
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	75bb      	strb	r3, [r7, #22]
     sensorData.fields.temp_crc_expected = calculate_crc8(data, 2);
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 f8de 	bl	800110e <calculate_crc8>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	75fb      	strb	r3, [r7, #23]
     sensorData.fields.humi_data = (data[3] << 8) | (data[4] & 0xFF);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21a      	sxth	r2, r3
 8000f5e:	7a3b      	ldrb	r3, [r7, #8]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	833b      	strh	r3, [r7, #24]
     sensorData.fields.humi_crc = data[5];
 8000f6a:	7a7b      	ldrb	r3, [r7, #9]
 8000f6c:	76bb      	strb	r3, [r7, #26]
     sensorData.fields.humi_crc_expected = calculate_crc8(data + 3, 2);
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	3303      	adds	r3, #3
 8000f72:	2102      	movs	r1, #2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f8ca 	bl	800110e <calculate_crc8>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	76fb      	strb	r3, [r7, #27]
     WriteValuesToFlash(startAddress,sensorData.values[0],sensorData.values[1]);
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f88:	f7ff ff0e 	bl	8000da8 <WriteValuesToFlash>
     startAddress += 8; // Move to the next address (4 bytes for temp + 4 bytes for humidity)
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	3308      	adds	r3, #8
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
     HAL_Delay(5000);
 8000f92:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f96:	f000 fc05 	bl	80017a4 <HAL_Delay>
  {
 8000f9a:	e7b3      	b.n	8000f04 <main+0x38>
 8000f9c:	0800c000 	.word	0x0800c000
 8000fa0:	20000084 	.word	0x20000084

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	; 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	; 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 ffba 	bl	8003f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <SystemClock_Config+0xb4>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a21      	ldr	r2, [pc, #132]	; (8001058 <SystemClock_Config+0xb4>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <SystemClock_Config+0xb4>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <SystemClock_Config+0xb8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <SystemClock_Config+0xb8>)
 8000fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <SystemClock_Config+0xb8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001008:	2310      	movs	r3, #16
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800100c:	2300      	movs	r3, #0
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001010:	f107 0320 	add.w	r3, r7, #32
 8001014:	4618      	mov	r0, r3
 8001016:	f002 f93d 	bl	8003294 <HAL_RCC_OscConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001020:	f000 f870 	bl	8001104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001024:	230f      	movs	r3, #15
 8001026:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fba0 	bl	8003784 <HAL_RCC_ClockConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800104a:	f000 f85b 	bl	8001104 <Error_Handler>
  }
}
 800104e:	bf00      	nop
 8001050:	3750      	adds	r7, #80	; 0x50
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40007000 	.word	0x40007000

08001060 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_I2C2_Init+0x50>)
 8001066:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <MX_I2C2_Init+0x54>)
 8001068:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_I2C2_Init+0x50>)
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <MX_I2C2_Init+0x58>)
 800106e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_I2C2_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_I2C2_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_I2C2_Init+0x50>)
 800107e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001082:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <MX_I2C2_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_I2C2_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <MX_I2C2_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_I2C2_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MX_I2C2_Init+0x50>)
 800109e:	f001 f8ff 	bl	80022a0 <HAL_I2C_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010a8:	f000 f82c 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000084 	.word	0x20000084
 80010b4:	40005800 	.word	0x40005800
 80010b8:	000186a0 	.word	0x000186a0

080010bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_GPIO_Init+0x30>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <MX_GPIO_Init+0x30>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_GPIO_Init+0x30>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <SHT_init>:

/* USER CODE BEGIN 4 */


void SHT_init(I2C_HandleTypeDef *hi2c) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    MX_I2C2_Init();  // Initialize I2C as per your current implementation
 80010f8:	f7ff ffb2 	bl	8001060 <MX_I2C2_Init>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <Error_Handler>:




void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110c:	e7fe      	b.n	800110c <Error_Handler+0x8>

0800110e <calculate_crc8>:
static void SHT_resetCmd(I2C_HandleTypeDef *hi2c);



uint8_t calculate_crc8(const uint8_t *data, uint8_t len)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	70fb      	strb	r3, [r7, #3]
    const uint8_t POLY = 0x31;
 800111a:	2331      	movs	r3, #49	; 0x31
 800111c:	733b      	strb	r3, [r7, #12]
    uint8_t crc = 0xFF;
 800111e:	23ff      	movs	r3, #255	; 0xff
 8001120:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < len; ++i) {
 8001122:	2300      	movs	r3, #0
 8001124:	73bb      	strb	r3, [r7, #14]
 8001126:	e023      	b.n	8001170 <calculate_crc8+0x62>
        crc ^= data[i];
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	4053      	eors	r3, r2
 8001134:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; ++j) {
 8001136:	2300      	movs	r3, #0
 8001138:	737b      	strb	r3, [r7, #13]
 800113a:	e013      	b.n	8001164 <calculate_crc8+0x56>
            crc = (crc & 0x80) ? (crc << 1) ^ POLY : (crc << 1);
 800113c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001140:	2b00      	cmp	r3, #0
 8001142:	da08      	bge.n	8001156 <calculate_crc8+0x48>
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	b25a      	sxtb	r2, r3
 800114a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800114e:	4053      	eors	r3, r2
 8001150:	b25b      	sxtb	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	e002      	b.n	800115c <calculate_crc8+0x4e>
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; ++j) {
 800115e:	7b7b      	ldrb	r3, [r7, #13]
 8001160:	3301      	adds	r3, #1
 8001162:	737b      	strb	r3, [r7, #13]
 8001164:	7b7b      	ldrb	r3, [r7, #13]
 8001166:	2b07      	cmp	r3, #7
 8001168:	d9e8      	bls.n	800113c <calculate_crc8+0x2e>
    for (uint8_t i = 0; i < len; ++i) {
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	3301      	adds	r3, #1
 800116e:	73bb      	strb	r3, [r7, #14]
 8001170:	7bba      	ldrb	r2, [r7, #14]
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3d7      	bcc.n	8001128 <calculate_crc8+0x1a>
        }
    }

    return crc;
 8001178:	7bfb      	ldrb	r3, [r7, #15]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <SHT_write>:


void SHT_write(I2C_HandleTypeDef *hi2c) {
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af02      	add	r7, sp, #8
 800118c:	6078      	str	r0, [r7, #4]
    uint8_t cmd[2] = {0x24, 0x00};  // Command to measure temperature and humidity
 800118e:	2324      	movs	r3, #36	; 0x24
 8001190:	81bb      	strh	r3, [r7, #12]

    HAL_I2C_Master_Transmit(hi2c, SHT30_I2C_ADDR << 1, cmd, 2, 1000);
 8001192:	f107 020c 	add.w	r2, r7, #12
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2302      	movs	r3, #2
 800119e:	2188      	movs	r1, #136	; 0x88
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f001 f9c1 	bl	8002528 <HAL_I2C_Master_Transmit>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <SHT_read>:

void SHT_read(I2C_HandleTypeDef *hi2c, float *temperature, float *humidity) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
    uint8_t data[6];
    float temp_raw, humidity_raw;
    uint8_t crc_temp_expected, crc_humidity_expected;
    uint8_t crc_temp_received, crc_humidity_received;

    HAL_I2C_Master_Receive(hi2c, (SHT30_I2C_ADDR << 1) | 0x01, data, 6, 1000);
 80011bc:	f107 0214 	add.w	r2, r7, #20
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2306      	movs	r3, #6
 80011c8:	2189      	movs	r1, #137	; 0x89
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f001 faaa 	bl	8002724 <HAL_I2C_Master_Receive>
    // Calculate CRC for temperature data (data[0] and data[1])
        crc_temp_expected = calculate_crc8(data, 2);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2102      	movs	r1, #2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff99 	bl	800110e <calculate_crc8>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        crc_temp_received = data[2];
 80011e2:	7dbb      	ldrb	r3, [r7, #22]
 80011e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        // Calculate CRC for humidity data (data[3] and data[4])
        crc_humidity_expected = calculate_crc8(data + 3, 2);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	3303      	adds	r3, #3
 80011ee:	2102      	movs	r1, #2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff8c 	bl	800110e <calculate_crc8>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        crc_humidity_received = data[5];
 80011fc:	7e7b      	ldrb	r3, [r7, #25]
 80011fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

        // Verify CRCs
        if (crc_temp_expected != crc_temp_received || crc_humidity_expected != crc_humidity_received)
 8001202:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001206:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800120a:	429a      	cmp	r2, r3
 800120c:	d105      	bne.n	800121a <SHT_read+0x6a>
 800120e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001212:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001216:	429a      	cmp	r2, r3
 8001218:	d003      	beq.n	8001222 <SHT_read+0x72>
        {
            // Handle CRC error, e.g., return an error code or log a message
           printf("error");
 800121a:	4831      	ldr	r0, [pc, #196]	; (80012e0 <SHT_read+0x130>)
 800121c:	f002 fd40 	bl	8003ca0 <iprintf>
 8001220:	e050      	b.n	80012c4 <SHT_read+0x114>
            return;
        }
    temp_raw = data[0] * 256 + data[1];
 8001222:	7d3b      	ldrb	r3, [r7, #20]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	7d7a      	ldrb	r2, [r7, #21]
 8001228:	4413      	add	r3, r2
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001232:	edc7 7a08 	vstr	s15, [r7, #32]
    *temperature = (temp_raw * 175.0 / 65535.0) - 45.0;
 8001236:	6a38      	ldr	r0, [r7, #32]
 8001238:	f7ff f97e 	bl	8000538 <__aeabi_f2d>
 800123c:	a324      	add	r3, pc, #144	; (adr r3, 80012d0 <SHT_read+0x120>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f9d1 	bl	80005e8 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	a322      	add	r3, pc, #136	; (adr r3, 80012d8 <SHT_read+0x128>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff faf2 	bl	800083c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <SHT_read+0x134>)
 8001266:	f7ff f807 	bl	8000278 <__aeabi_dsub>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fbcb 	bl	8000a0c <__aeabi_d2f>
 8001276:	4602      	mov	r2, r0
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	601a      	str	r2, [r3, #0]

    humidity_raw = data[3] * 256 + data[4];
 800127c:	7dfb      	ldrb	r3, [r7, #23]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	7e3a      	ldrb	r2, [r7, #24]
 8001282:	4413      	add	r3, r2
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128c:	edc7 7a07 	vstr	s15, [r7, #28]
    *humidity = (humidity_raw * 100.0) / 65535.0;
 8001290:	69f8      	ldr	r0, [r7, #28]
 8001292:	f7ff f951 	bl	8000538 <__aeabi_f2d>
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <SHT_read+0x138>)
 800129c:	f7ff f9a4 	bl	80005e8 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	a30b      	add	r3, pc, #44	; (adr r3, 80012d8 <SHT_read+0x128>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff fac5 	bl	800083c <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f7ff fba7 	bl	8000a0c <__aeabi_d2f>
 80012be:	4602      	mov	r2, r0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	f3af 8000 	nop.w
 80012d0:	00000000 	.word	0x00000000
 80012d4:	4065e000 	.word	0x4065e000
 80012d8:	00000000 	.word	0x00000000
 80012dc:	40efffe0 	.word	0x40efffe0
 80012e0:	08004a58 	.word	0x08004a58
 80012e4:	40468000 	.word	0x40468000
 80012e8:	40590000 	.word	0x40590000

080012ec <heater_on>:




 void heater_on(I2C_HandleTypeDef *hi2c)
 {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af02      	add	r7, sp, #8
 80012f2:	6078      	str	r0, [r7, #4]
     uint8_t cmd[2] = {0x30, 0x6D};  // Heater Enable Command
 80012f4:	f646 5330 	movw	r3, #27952	; 0x6d30
 80012f8:	81bb      	strh	r3, [r7, #12]

     // Send the command via I2C
     if (HAL_I2C_Master_Transmit(hi2c, SHT30_I2C_ADDR << 1, cmd, 2, HAL_MAX_DELAY) == HAL_OK)
 80012fa:	f107 020c 	add.w	r2, r7, #12
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2302      	movs	r3, #2
 8001306:	2188      	movs	r1, #136	; 0x88
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f001 f90d 	bl	8002528 <HAL_I2C_Master_Transmit>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d103      	bne.n	800131c <heater_on+0x30>
     {
         // Command was successfully transmitted
         printf("Heater enabled.\n");
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <heater_on+0x40>)
 8001316:	f002 fd29 	bl	8003d6c <puts>
     else
     {
         // Transmission failed
         printf("Failed to enable heater.\n");
     }
 }
 800131a:	e002      	b.n	8001322 <heater_on+0x36>
         printf("Failed to enable heater.\n");
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <heater_on+0x44>)
 800131e:	f002 fd25 	bl	8003d6c <puts>
 }
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	08004a60 	.word	0x08004a60
 8001330:	08004a70 	.word	0x08004a70

08001334 <SHT_writestatus>:





 void SHT_writestatus(I2C_HandleTypeDef *hi2c) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af02      	add	r7, sp, #8
 800133a:	6078      	str	r0, [r7, #4]
	 uint8_t cmd[2] = {0xF3, 0x2D};  // Command to measure temperature and humidity
 800133c:	f642 53f3 	movw	r3, #11763	; 0x2df3
 8001340:	81bb      	strh	r3, [r7, #12]

     HAL_I2C_Master_Transmit(hi2c, SHT30_I2C_ADDR << 1, cmd, 2, 1000);
 8001342:	f107 020c 	add.w	r2, r7, #12
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2302      	movs	r3, #2
 800134e:	2188      	movs	r1, #136	; 0x88
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f001 f8e9 	bl	8002528 <HAL_I2C_Master_Transmit>
 }
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <read_status_register>:

 void read_status_register(uint16_t *status,I2C_HandleTypeDef *hi2c)
 {
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af02      	add	r7, sp, #8
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]

     uint8_t data1[3];  // Buffer to hold the status register data and checksum

     uint8_t crc;
     // Receive the status register data
     HAL_I2C_Master_Receive(hi2c, (SHT30_I2C_ADDR << 1) | 0x01 , data1, 3, HAL_MAX_DELAY);
 800136a:	f107 020c 	add.w	r2, r7, #12
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2303      	movs	r3, #3
 8001376:	2189      	movs	r1, #137	; 0x89
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f001 f9d3 	bl	8002724 <HAL_I2C_Master_Receive>

     // Combine the received bytes into a 16-bit status register value
    // *status = (data[0] << 8) | data[1];
     *status = data1[0] * 256 + data1[1];
 800137e:	7b3b      	ldrb	r3, [r7, #12]
 8001380:	b29b      	uxth	r3, r3
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b29a      	uxth	r2, r3
 8001386:	7b7b      	ldrb	r3, [r7, #13]
 8001388:	b29b      	uxth	r3, r3
 800138a:	4413      	add	r3, r2
 800138c:	b29a      	uxth	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	801a      	strh	r2, [r3, #0]

     // Checksum validation

      crc = calculate_crc8(data1, 2);
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2102      	movs	r1, #2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff feb8 	bl	800110e <calculate_crc8>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
         if (crc != data1[2])
 80013a2:	7bbb      	ldrb	r3, [r7, #14]
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d003      	beq.n	80013b2 <read_status_register+0x52>
         {
             printf("CRC check failed.\n");
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <read_status_register+0x64>)
 80013ac:	f002 fcde 	bl	8003d6c <puts>
 80013b0:	e005      	b.n	80013be <read_status_register+0x5e>
             return;
         }


     printf("Status register: 0x%04X\n", *status);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <read_status_register+0x68>)
 80013ba:	f002 fc71 	bl	8003ca0 <iprintf>
 }
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	08004abc 	.word	0x08004abc
 80013c8:	08004ad0 	.word	0x08004ad0

080013cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_MspInit+0x4c>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_MspInit+0x4c>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a08      	ldr	r2, [pc, #32]	; (8001418 <HAL_MspInit+0x4c>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_MspInit+0x4c>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800

0800141c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	; 0x28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_I2C_MspInit+0x84>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d12c      	bne.n	8001498 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800145a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001460:	2312      	movs	r3, #18
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800146c:	2304      	movs	r3, #4
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4619      	mov	r1, r3
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <HAL_I2C_MspInit+0x8c>)
 8001478:	f000 fd76 	bl	8001f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 8001486:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_I2C_MspInit+0x88>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40005800 	.word	0x40005800
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400

080014ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b0:	e7fe      	b.n	80014b0 <NMI_Handler+0x4>

080014b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <MemManage_Handler+0x4>

080014be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <UsageFault_Handler+0x4>

080014ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f8:	f000 f934 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e00a      	b.n	8001528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001512:	f3af 8000 	nop.w
 8001516:	4601      	mov	r1, r0
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	60ba      	str	r2, [r7, #8]
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf0      	blt.n	8001512 <_read+0x12>
  }

  return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e009      	b.n	8001560 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1c5a      	adds	r2, r3, #1
 8001550:	60ba      	str	r2, [r7, #8]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	429a      	cmp	r2, r3
 8001566:	dbf1      	blt.n	800154c <_write+0x12>
  }
  return len;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_close>:

int _close(int file)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800159a:	605a      	str	r2, [r3, #4]
  return 0;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <_isatty>:

int _isatty(int file)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	; (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	; (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	; (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f002 fcdc 	bl	8003fc8 <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20020000 	.word	0x20020000
 800163c:	00000400 	.word	0x00000400
 8001640:	200000d8 	.word	0x200000d8
 8001644:	20000250 	.word	0x20000250

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001670:	f7ff ffea 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001676:	490d      	ldr	r1, [pc, #52]	; (80016ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800167c:	e002      	b.n	8001684 <LoopCopyDataInit>

0800167e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001682:	3304      	adds	r3, #4

08001684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001688:	d3f9      	bcc.n	800167e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800168c:	4c0a      	ldr	r4, [pc, #40]	; (80016b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800168e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001690:	e001      	b.n	8001696 <LoopFillZerobss>

08001692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001694:	3204      	adds	r2, #4

08001696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001698:	d3fb      	bcc.n	8001692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169a:	f002 fc9b 	bl	8003fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7ff fc15 	bl	8000ecc <main>
  bx  lr    
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016b0:	08004b48 	.word	0x08004b48
  ldr r2, =_sbss
 80016b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016b8:	2000024c 	.word	0x2000024c

080016bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <HAL_Init+0x40>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_Init+0x40>)
 80016d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_Init+0x40>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f931 	bl	8001950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f000 f808 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fe6a 	bl	80013cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023c00 	.word	0x40023c00

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f93b 	bl	800199e <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f000 f911 	bl	8001966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000000 	.word	0x20000000
 800175c:	20000008 	.word	0x20000008
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008
 8001788:	200000dc 	.word	0x200000dc

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	200000dc 	.word	0x200000dc

080017a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff ffee 	bl	800178c <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017bc:	d005      	beq.n	80017ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_Delay+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ca:	bf00      	nop
 80017cc:	f7ff ffde 	bl	800178c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f7      	bhi.n	80017cc <HAL_Delay+0x28>
  {
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	6039      	str	r1, [r7, #0]
 800185a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	2b00      	cmp	r3, #0
 8001862:	db0a      	blt.n	800187a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	b2da      	uxtb	r2, r3
 8001868:	490c      	ldr	r1, [pc, #48]	; (800189c <__NVIC_SetPriority+0x4c>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	0112      	lsls	r2, r2, #4
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	440b      	add	r3, r1
 8001874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001878:	e00a      	b.n	8001890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4908      	ldr	r1, [pc, #32]	; (80018a0 <__NVIC_SetPriority+0x50>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	3b04      	subs	r3, #4
 8001888:	0112      	lsls	r2, r2, #4
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	440b      	add	r3, r1
 800188e:	761a      	strb	r2, [r3, #24]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000e100 	.word	0xe000e100
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f1c3 0307 	rsb	r3, r3, #7
 80018be:	2b04      	cmp	r3, #4
 80018c0:	bf28      	it	cs
 80018c2:	2304      	movcs	r3, #4
 80018c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3304      	adds	r3, #4
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d902      	bls.n	80018d4 <NVIC_EncodePriority+0x30>
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3b03      	subs	r3, #3
 80018d2:	e000      	b.n	80018d6 <NVIC_EncodePriority+0x32>
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa01 f303 	lsl.w	r3, r1, r3
 80018f6:	43d9      	mvns	r1, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	4313      	orrs	r3, r2
         );
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800191c:	d301      	bcc.n	8001922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191e:	2301      	movs	r3, #1
 8001920:	e00f      	b.n	8001942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001922:	4a0a      	ldr	r2, [pc, #40]	; (800194c <SysTick_Config+0x40>)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192a:	210f      	movs	r1, #15
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	f7ff ff8e 	bl	8001850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <SysTick_Config+0x40>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <SysTick_Config+0x40>)
 800193c:	2207      	movs	r2, #7
 800193e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	e000e010 	.word	0xe000e010

08001950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ff47 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff5c 	bl	8001834 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff8e 	bl	80018a4 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5d 	bl	8001850 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffb0 	bl	800190c <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_FLASH_Program+0xa0>)
 80019cc:	7e1b      	ldrb	r3, [r3, #24]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d101      	bne.n	80019d6 <HAL_FLASH_Program+0x1e>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e03b      	b.n	8001a4e <HAL_FLASH_Program+0x96>
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_FLASH_Program+0xa0>)
 80019d8:	2201      	movs	r2, #1
 80019da:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019e0:	f000 f870 	bl	8001ac4 <FLASH_WaitForLastOperation>
 80019e4:	4603      	mov	r3, r0
 80019e6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d12b      	bne.n	8001a46 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80019f4:	783b      	ldrb	r3, [r7, #0]
 80019f6:	4619      	mov	r1, r3
 80019f8:	68b8      	ldr	r0, [r7, #8]
 80019fa:	f000 f91b 	bl	8001c34 <FLASH_Program_Byte>
 80019fe:	e016      	b.n	8001a2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d105      	bne.n	8001a12 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001a06:	883b      	ldrh	r3, [r7, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	68b8      	ldr	r0, [r7, #8]
 8001a0c:	f000 f8ee 	bl	8001bec <FLASH_Program_HalfWord>
 8001a10:	e00d      	b.n	8001a2e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d105      	bne.n	8001a24 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	68b8      	ldr	r0, [r7, #8]
 8001a1e:	f000 f8c3 	bl	8001ba8 <FLASH_Program_Word>
 8001a22:	e004      	b.n	8001a2e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a28:	68b8      	ldr	r0, [r7, #8]
 8001a2a:	f000 f88b 	bl	8001b44 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a2e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a32:	f000 f847 	bl	8001ac4 <FLASH_WaitForLastOperation>
 8001a36:	4603      	mov	r3, r0
 8001a38:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001a3a:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_FLASH_Program+0xa4>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_FLASH_Program+0xa4>)
 8001a40:	f023 0301 	bic.w	r3, r3, #1
 8001a44:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <HAL_FLASH_Program+0xa0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200000e0 	.word	0x200000e0
 8001a5c:	40023c00 	.word	0x40023c00

08001a60 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_FLASH_Unlock+0x38>)
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	da0b      	bge.n	8001a8a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_FLASH_Unlock+0x38>)
 8001a74:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_FLASH_Unlock+0x3c>)
 8001a76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_FLASH_Unlock+0x38>)
 8001a7a:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <HAL_FLASH_Unlock+0x40>)
 8001a7c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_FLASH_Unlock+0x38>)
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	da01      	bge.n	8001a8a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40023c00 	.word	0x40023c00
 8001a9c:	45670123 	.word	0x45670123
 8001aa0:	cdef89ab 	.word	0xcdef89ab

08001aa4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_FLASH_Lock+0x1c>)
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <HAL_FLASH_Lock+0x1c>)
 8001aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ab2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40023c00 	.word	0x40023c00

08001ac4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <FLASH_WaitForLastOperation+0x78>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad6:	f7ff fe59 	bl	800178c <HAL_GetTick>
 8001ada:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001adc:	e010      	b.n	8001b00 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d00c      	beq.n	8001b00 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d007      	beq.n	8001afc <FLASH_WaitForLastOperation+0x38>
 8001aec:	f7ff fe4e 	bl	800178c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d201      	bcs.n	8001b00 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e019      	b.n	8001b34 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <FLASH_WaitForLastOperation+0x7c>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1e8      	bne.n	8001ade <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <FLASH_WaitForLastOperation+0x7c>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <FLASH_WaitForLastOperation+0x7c>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <FLASH_WaitForLastOperation+0x7c>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001b2a:	f000 f8a5 	bl	8001c78 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
  
}  
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200000e0 	.word	0x200000e0
 8001b40:	40023c00 	.word	0x40023c00

08001b44 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <FLASH_Program_DoubleWord+0x60>)
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <FLASH_Program_DoubleWord+0x60>)
 8001b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <FLASH_Program_DoubleWord+0x60>)
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <FLASH_Program_DoubleWord+0x60>)
 8001b62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <FLASH_Program_DoubleWord+0x60>)
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <FLASH_Program_DoubleWord+0x60>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001b7a:	f3bf 8f6f 	isb	sy
}
 8001b7e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001b80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	000a      	movs	r2, r1
 8001b8e:	2300      	movs	r3, #0
 8001b90:	68f9      	ldr	r1, [r7, #12]
 8001b92:	3104      	adds	r1, #4
 8001b94:	4613      	mov	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40023c00 	.word	0x40023c00

08001ba8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	; (8001be8 <FLASH_Program_Word+0x40>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <FLASH_Program_Word+0x40>)
 8001bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <FLASH_Program_Word+0x40>)
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	4a09      	ldr	r2, [pc, #36]	; (8001be8 <FLASH_Program_Word+0x40>)
 8001bc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <FLASH_Program_Word+0x40>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <FLASH_Program_Word+0x40>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	601a      	str	r2, [r3, #0]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40023c00 	.word	0x40023c00

08001bec <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <FLASH_Program_HalfWord+0x44>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <FLASH_Program_HalfWord+0x44>)
 8001bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <FLASH_Program_HalfWord+0x44>)
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <FLASH_Program_HalfWord+0x44>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <FLASH_Program_HalfWord+0x44>)
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <FLASH_Program_HalfWord+0x44>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	801a      	strh	r2, [r3, #0]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023c00 	.word	0x40023c00

08001c34 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <FLASH_Program_Byte+0x40>)
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <FLASH_Program_Byte+0x40>)
 8001c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <FLASH_Program_Byte+0x40>)
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <FLASH_Program_Byte+0x40>)
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <FLASH_Program_Byte+0x40>)
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <FLASH_Program_Byte+0x40>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	78fa      	ldrb	r2, [r7, #3]
 8001c64:	701a      	strb	r2, [r3, #0]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <FLASH_SetErrorCode+0xa4>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <FLASH_SetErrorCode+0xa8>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	f043 0310 	orr.w	r3, r3, #16
 8001c90:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <FLASH_SetErrorCode+0xa8>)
 8001c92:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <FLASH_SetErrorCode+0xa4>)
 8001c96:	2210      	movs	r2, #16
 8001c98:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <FLASH_SetErrorCode+0xa4>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f003 0320 	and.w	r3, r3, #32
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d008      	beq.n	8001cb8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <FLASH_SetErrorCode+0xa8>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f043 0308 	orr.w	r3, r3, #8
 8001cae:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <FLASH_SetErrorCode+0xa8>)
 8001cb0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <FLASH_SetErrorCode+0xa4>)
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <FLASH_SetErrorCode+0xa4>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <FLASH_SetErrorCode+0xa8>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <FLASH_SetErrorCode+0xa8>)
 8001cce:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <FLASH_SetErrorCode+0xa4>)
 8001cd2:	2240      	movs	r2, #64	; 0x40
 8001cd4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <FLASH_SetErrorCode+0xa4>)
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <FLASH_SetErrorCode+0xa8>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <FLASH_SetErrorCode+0xa8>)
 8001cec:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <FLASH_SetErrorCode+0xa4>)
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <FLASH_SetErrorCode+0xa4>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <FLASH_SetErrorCode+0xa8>)
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	f043 0320 	orr.w	r3, r3, #32
 8001d08:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <FLASH_SetErrorCode+0xa8>)
 8001d0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <FLASH_SetErrorCode+0xa4>)
 8001d0e:	2202      	movs	r2, #2
 8001d10:	60da      	str	r2, [r3, #12]
  }
}
 8001d12:	bf00      	nop
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40023c00 	.word	0x40023c00
 8001d20:	200000e0 	.word	0x200000e0

08001d24 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_FLASHEx_Erase+0xd8>)
 8001d38:	7e1b      	ldrb	r3, [r3, #24]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_FLASHEx_Erase+0x1e>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e058      	b.n	8001df4 <HAL_FLASHEx_Erase+0xd0>
 8001d42:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <HAL_FLASHEx_Erase+0xd8>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d4c:	f7ff feba 	bl	8001ac4 <FLASH_WaitForLastOperation>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d148      	bne.n	8001dec <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d115      	bne.n	8001d96 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 f844 	bl	8001e04 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d80:	f7ff fea0 	bl	8001ac4 <FLASH_WaitForLastOperation>
 8001d84:	4603      	mov	r3, r0
 8001d86:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_FLASHEx_Erase+0xdc>)
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	; (8001e00 <HAL_FLASHEx_Erase+0xdc>)
 8001d8e:	f023 0304 	bic.w	r3, r3, #4
 8001d92:	6113      	str	r3, [r2, #16]
 8001d94:	e028      	b.n	8001de8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	e01c      	b.n	8001dd8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	4619      	mov	r1, r3
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f000 f850 	bl	8001e4c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001db0:	f7ff fe88 	bl	8001ac4 <FLASH_WaitForLastOperation>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_FLASHEx_Erase+0xdc>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <HAL_FLASHEx_Erase+0xdc>)
 8001dbe:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001dc2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	601a      	str	r2, [r3, #0]
          break;
 8001dd0:	e00a      	b.n	8001de8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4413      	add	r3, r2
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d3da      	bcc.n	8001d9e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001de8:	f000 f878 	bl	8001edc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_FLASHEx_Erase+0xd8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	761a      	strb	r2, [r3, #24]

  return status;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200000e0 	.word	0x200000e0
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <FLASH_MassErase+0x44>)
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <FLASH_MassErase+0x44>)
 8001e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <FLASH_MassErase+0x44>)
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	4a09      	ldr	r2, [pc, #36]	; (8001e48 <FLASH_MassErase+0x44>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <FLASH_MassErase+0x44>)
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	4313      	orrs	r3, r2
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <FLASH_MassErase+0x44>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e38:	6113      	str	r3, [r2, #16]
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	e010      	b.n	8001e8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d103      	bne.n	8001e76 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e009      	b.n	8001e8a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001e76:	78fb      	ldrb	r3, [r7, #3]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d103      	bne.n	8001e84 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	e002      	b.n	8001e8a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001e84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <FLASH_Erase_Sector+0x8c>)
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <FLASH_Erase_Sector+0x8c>)
 8001e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <FLASH_Erase_Sector+0x8c>)
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	490f      	ldr	r1, [pc, #60]	; (8001ed8 <FLASH_Erase_Sector+0x8c>)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <FLASH_Erase_Sector+0x8c>)
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <FLASH_Erase_Sector+0x8c>)
 8001ea8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001eac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <FLASH_Erase_Sector+0x8c>)
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <FLASH_Erase_Sector+0x8c>)
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <FLASH_Erase_Sector+0x8c>)
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <FLASH_Erase_Sector+0x8c>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	6113      	str	r3, [r2, #16]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40023c00 	.word	0x40023c00

08001edc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001ee0:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d017      	beq.n	8001f1c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001ef2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ef6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001efe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f0e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d017      	beq.n	8001f58 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f32:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f4a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <FLASH_FlushCaches+0x88>)
 8001f52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f56:	6013      	str	r3, [r2, #0]
  }
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	; 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e16b      	b.n	800225c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f84:	2201      	movs	r2, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f040 815a 	bne.w	8002256 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d005      	beq.n	8001fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d130      	bne.n	800201c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 0201 	and.w	r2, r3, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b03      	cmp	r3, #3
 8002026:	d017      	beq.n	8002058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d123      	bne.n	80020ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0203 	and.w	r2, r3, #3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80b4 	beq.w	8002256 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b60      	ldr	r3, [pc, #384]	; (8002274 <HAL_GPIO_Init+0x30c>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	4a5f      	ldr	r2, [pc, #380]	; (8002274 <HAL_GPIO_Init+0x30c>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	; 0x44
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <HAL_GPIO_Init+0x30c>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a5b      	ldr	r2, [pc, #364]	; (8002278 <HAL_GPIO_Init+0x310>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_GPIO_Init+0x314>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d02b      	beq.n	800218e <HAL_GPIO_Init+0x226>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a51      	ldr	r2, [pc, #324]	; (8002280 <HAL_GPIO_Init+0x318>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d025      	beq.n	800218a <HAL_GPIO_Init+0x222>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a50      	ldr	r2, [pc, #320]	; (8002284 <HAL_GPIO_Init+0x31c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01f      	beq.n	8002186 <HAL_GPIO_Init+0x21e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4f      	ldr	r2, [pc, #316]	; (8002288 <HAL_GPIO_Init+0x320>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d019      	beq.n	8002182 <HAL_GPIO_Init+0x21a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4e      	ldr	r2, [pc, #312]	; (800228c <HAL_GPIO_Init+0x324>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d013      	beq.n	800217e <HAL_GPIO_Init+0x216>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4d      	ldr	r2, [pc, #308]	; (8002290 <HAL_GPIO_Init+0x328>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00d      	beq.n	800217a <HAL_GPIO_Init+0x212>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4c      	ldr	r2, [pc, #304]	; (8002294 <HAL_GPIO_Init+0x32c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d007      	beq.n	8002176 <HAL_GPIO_Init+0x20e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4b      	ldr	r2, [pc, #300]	; (8002298 <HAL_GPIO_Init+0x330>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_GPIO_Init+0x20a>
 800216e:	2307      	movs	r3, #7
 8002170:	e00e      	b.n	8002190 <HAL_GPIO_Init+0x228>
 8002172:	2308      	movs	r3, #8
 8002174:	e00c      	b.n	8002190 <HAL_GPIO_Init+0x228>
 8002176:	2306      	movs	r3, #6
 8002178:	e00a      	b.n	8002190 <HAL_GPIO_Init+0x228>
 800217a:	2305      	movs	r3, #5
 800217c:	e008      	b.n	8002190 <HAL_GPIO_Init+0x228>
 800217e:	2304      	movs	r3, #4
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x228>
 8002182:	2303      	movs	r3, #3
 8002184:	e004      	b.n	8002190 <HAL_GPIO_Init+0x228>
 8002186:	2302      	movs	r3, #2
 8002188:	e002      	b.n	8002190 <HAL_GPIO_Init+0x228>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_GPIO_Init+0x228>
 800218e:	2300      	movs	r3, #0
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	f002 0203 	and.w	r2, r2, #3
 8002196:	0092      	lsls	r2, r2, #2
 8002198:	4093      	lsls	r3, r2
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a0:	4935      	ldr	r1, [pc, #212]	; (8002278 <HAL_GPIO_Init+0x310>)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ae:	4b3b      	ldr	r3, [pc, #236]	; (800229c <HAL_GPIO_Init+0x334>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021d2:	4a32      	ldr	r2, [pc, #200]	; (800229c <HAL_GPIO_Init+0x334>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d8:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_GPIO_Init+0x334>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021fc:	4a27      	ldr	r2, [pc, #156]	; (800229c <HAL_GPIO_Init+0x334>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002202:	4b26      	ldr	r3, [pc, #152]	; (800229c <HAL_GPIO_Init+0x334>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_GPIO_Init+0x334>)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_GPIO_Init+0x334>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002250:	4a12      	ldr	r2, [pc, #72]	; (800229c <HAL_GPIO_Init+0x334>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3301      	adds	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b0f      	cmp	r3, #15
 8002260:	f67f ae90 	bls.w	8001f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3724      	adds	r7, #36	; 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40013800 	.word	0x40013800
 800227c:	40020000 	.word	0x40020000
 8002280:	40020400 	.word	0x40020400
 8002284:	40020800 	.word	0x40020800
 8002288:	40020c00 	.word	0x40020c00
 800228c:	40021000 	.word	0x40021000
 8002290:	40021400 	.word	0x40021400
 8002294:	40021800 	.word	0x40021800
 8002298:	40021c00 	.word	0x40021c00
 800229c:	40013c00 	.word	0x40013c00

080022a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e12b      	b.n	800250a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff f8a8 	bl	800141c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2224      	movs	r2, #36	; 0x24
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002304:	f001 fbf6 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 8002308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4a81      	ldr	r2, [pc, #516]	; (8002514 <HAL_I2C_Init+0x274>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d807      	bhi.n	8002324 <HAL_I2C_Init+0x84>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4a80      	ldr	r2, [pc, #512]	; (8002518 <HAL_I2C_Init+0x278>)
 8002318:	4293      	cmp	r3, r2
 800231a:	bf94      	ite	ls
 800231c:	2301      	movls	r3, #1
 800231e:	2300      	movhi	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e006      	b.n	8002332 <HAL_I2C_Init+0x92>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a7d      	ldr	r2, [pc, #500]	; (800251c <HAL_I2C_Init+0x27c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	bf94      	ite	ls
 800232c:	2301      	movls	r3, #1
 800232e:	2300      	movhi	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0e7      	b.n	800250a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4a78      	ldr	r2, [pc, #480]	; (8002520 <HAL_I2C_Init+0x280>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0c9b      	lsrs	r3, r3, #18
 8002344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a6a      	ldr	r2, [pc, #424]	; (8002514 <HAL_I2C_Init+0x274>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d802      	bhi.n	8002374 <HAL_I2C_Init+0xd4>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	3301      	adds	r3, #1
 8002372:	e009      	b.n	8002388 <HAL_I2C_Init+0xe8>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	4a69      	ldr	r2, [pc, #420]	; (8002524 <HAL_I2C_Init+0x284>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	3301      	adds	r3, #1
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	430b      	orrs	r3, r1
 800238e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800239a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	495c      	ldr	r1, [pc, #368]	; (8002514 <HAL_I2C_Init+0x274>)
 80023a4:	428b      	cmp	r3, r1
 80023a6:	d819      	bhi.n	80023dc <HAL_I2C_Init+0x13c>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e59      	subs	r1, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b6:	1c59      	adds	r1, r3, #1
 80023b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023bc:	400b      	ands	r3, r1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_I2C_Init+0x138>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1e59      	subs	r1, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d6:	e051      	b.n	800247c <HAL_I2C_Init+0x1dc>
 80023d8:	2304      	movs	r3, #4
 80023da:	e04f      	b.n	800247c <HAL_I2C_Init+0x1dc>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d111      	bne.n	8002408 <HAL_I2C_Init+0x168>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	440b      	add	r3, r1
 80023f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e012      	b.n	800242e <HAL_I2C_Init+0x18e>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1e58      	subs	r0, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	0099      	lsls	r1, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	fbb0 f3f3 	udiv	r3, r0, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x196>
 8002432:	2301      	movs	r3, #1
 8002434:	e022      	b.n	800247c <HAL_I2C_Init+0x1dc>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10e      	bne.n	800245c <HAL_I2C_Init+0x1bc>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e58      	subs	r0, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	440b      	add	r3, r1
 800244c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245a:	e00f      	b.n	800247c <HAL_I2C_Init+0x1dc>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e58      	subs	r0, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	0099      	lsls	r1, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	6809      	ldr	r1, [r1, #0]
 8002480:	4313      	orrs	r3, r2
 8002482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6911      	ldr	r1, [r2, #16]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68d2      	ldr	r2, [r2, #12]
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	430b      	orrs	r3, r1
 80024be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	000186a0 	.word	0x000186a0
 8002518:	001e847f 	.word	0x001e847f
 800251c:	003d08ff 	.word	0x003d08ff
 8002520:	431bde83 	.word	0x431bde83
 8002524:	10624dd3 	.word	0x10624dd3

08002528 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	461a      	mov	r2, r3
 8002534:	460b      	mov	r3, r1
 8002536:	817b      	strh	r3, [r7, #10]
 8002538:	4613      	mov	r3, r2
 800253a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff f926 	bl	800178c <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b20      	cmp	r3, #32
 800254c:	f040 80e0 	bne.w	8002710 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2319      	movs	r3, #25
 8002556:	2201      	movs	r2, #1
 8002558:	4970      	ldr	r1, [pc, #448]	; (800271c <HAL_I2C_Master_Transmit+0x1f4>)
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fc64 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002566:	2302      	movs	r3, #2
 8002568:	e0d3      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_I2C_Master_Transmit+0x50>
 8002574:	2302      	movs	r3, #2
 8002576:	e0cc      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d007      	beq.n	800259e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f042 0201 	orr.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2221      	movs	r2, #33	; 0x21
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2210      	movs	r2, #16
 80025ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	893a      	ldrh	r2, [r7, #8]
 80025ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a50      	ldr	r2, [pc, #320]	; (8002720 <HAL_I2C_Master_Transmit+0x1f8>)
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025e0:	8979      	ldrh	r1, [r7, #10]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	6a3a      	ldr	r2, [r7, #32]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 face 	bl	8002b88 <I2C_MasterRequestWrite>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e08d      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800260c:	e066      	b.n	80026dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	6a39      	ldr	r1, [r7, #32]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fd22 	bl	800305c <I2C_WaitOnTXEFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b04      	cmp	r3, #4
 8002624:	d107      	bne.n	8002636 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06b      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d11b      	bne.n	80026b0 <HAL_I2C_Master_Transmit+0x188>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d017      	beq.n	80026b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	6a39      	ldr	r1, [r7, #32]
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 fd19 	bl	80030ec <I2C_WaitOnBTFFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d107      	bne.n	80026d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e01a      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d194      	bne.n	800260e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	e000      	b.n	8002712 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002710:	2302      	movs	r3, #2
  }
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	00100002 	.word	0x00100002
 8002720:	ffff0000 	.word	0xffff0000

08002724 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	461a      	mov	r2, r3
 8002730:	460b      	mov	r3, r1
 8002732:	817b      	strh	r3, [r7, #10]
 8002734:	4613      	mov	r3, r2
 8002736:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff f828 	bl	800178c <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	f040 8217 	bne.w	8002b7a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2319      	movs	r3, #25
 8002752:	2201      	movs	r2, #1
 8002754:	497c      	ldr	r1, [pc, #496]	; (8002948 <HAL_I2C_Master_Receive+0x224>)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fb66 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
 8002764:	e20a      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_I2C_Master_Receive+0x50>
 8002770:	2302      	movs	r3, #2
 8002772:	e203      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b01      	cmp	r3, #1
 8002788:	d007      	beq.n	800279a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2222      	movs	r2, #34	; 0x22
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2210      	movs	r2, #16
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	893a      	ldrh	r2, [r7, #8]
 80027ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a5c      	ldr	r2, [pc, #368]	; (800294c <HAL_I2C_Master_Receive+0x228>)
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027dc:	8979      	ldrh	r1, [r7, #10]
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fa52 	bl	8002c8c <I2C_MasterRequestRead>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e1c4      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d113      	bne.n	8002822 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e198      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	2b01      	cmp	r3, #1
 8002828:	d11b      	bne.n	8002862 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	e178      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	2b02      	cmp	r3, #2
 8002868:	d11b      	bne.n	80028a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002878:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	e158      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	617b      	str	r3, [r7, #20]
 80028c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028c8:	e144      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	f200 80f1 	bhi.w	8002ab6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d123      	bne.n	8002924 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fc4b 	bl	800317c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e145      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	1c5a      	adds	r2, r3, #1
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002922:	e117      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	2b02      	cmp	r3, #2
 800292a:	d14e      	bne.n	80029ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	2200      	movs	r2, #0
 8002934:	4906      	ldr	r1, [pc, #24]	; (8002950 <HAL_I2C_Master_Receive+0x22c>)
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fa76 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d008      	beq.n	8002954 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e11a      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
 8002946:	bf00      	nop
 8002948:	00100002 	.word	0x00100002
 800294c:	ffff0000 	.word	0xffff0000
 8002950:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c8:	e0c4      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	2200      	movs	r2, #0
 80029d2:	496c      	ldr	r1, [pc, #432]	; (8002b84 <HAL_I2C_Master_Receive+0x460>)
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fa27 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0cb      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	4955      	ldr	r1, [pc, #340]	; (8002b84 <HAL_I2C_Master_Receive+0x460>)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f9f9 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e09d      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ab4:	e04e      	b.n	8002b54 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fb5e 	bl	800317c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e058      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d124      	bne.n	8002b54 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	2b03      	cmp	r3, #3
 8002b10:	d107      	bne.n	8002b22 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b20:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f47f aeb6 	bne.w	80028ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e000      	b.n	8002b7c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b7a:	2302      	movs	r3, #2
  }
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	00010004 	.word	0x00010004

08002b88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	460b      	mov	r3, r1
 8002b96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d006      	beq.n	8002bb2 <I2C_MasterRequestWrite+0x2a>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d003      	beq.n	8002bb2 <I2C_MasterRequestWrite+0x2a>
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bb0:	d108      	bne.n	8002bc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e00b      	b.n	8002bdc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	2b12      	cmp	r3, #18
 8002bca:	d107      	bne.n	8002bdc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f91d 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00d      	beq.n	8002c10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c02:	d103      	bne.n	8002c0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e035      	b.n	8002c7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c18:	d108      	bne.n	8002c2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c28:	611a      	str	r2, [r3, #16]
 8002c2a:	e01b      	b.n	8002c64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c2c:	897b      	ldrh	r3, [r7, #10]
 8002c2e:	11db      	asrs	r3, r3, #7
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f003 0306 	and.w	r3, r3, #6
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f063 030f 	orn	r3, r3, #15
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	490e      	ldr	r1, [pc, #56]	; (8002c84 <I2C_MasterRequestWrite+0xfc>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f966 	bl	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e010      	b.n	8002c7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4907      	ldr	r1, [pc, #28]	; (8002c88 <I2C_MasterRequestWrite+0x100>)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f956 	bl	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	00010008 	.word	0x00010008
 8002c88:	00010002 	.word	0x00010002

08002c8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d006      	beq.n	8002cc6 <I2C_MasterRequestRead+0x3a>
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d003      	beq.n	8002cc6 <I2C_MasterRequestRead+0x3a>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cc4:	d108      	bne.n	8002cd8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	e00b      	b.n	8002cf0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	2b11      	cmp	r3, #17
 8002cde:	d107      	bne.n	8002cf0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f893 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00d      	beq.n	8002d24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d16:	d103      	bne.n	8002d20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e079      	b.n	8002e18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d2c:	d108      	bne.n	8002d40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d2e:	897b      	ldrh	r3, [r7, #10]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	611a      	str	r2, [r3, #16]
 8002d3e:	e05f      	b.n	8002e00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d40:	897b      	ldrh	r3, [r7, #10]
 8002d42:	11db      	asrs	r3, r3, #7
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 0306 	and.w	r3, r3, #6
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f063 030f 	orn	r3, r3, #15
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4930      	ldr	r1, [pc, #192]	; (8002e20 <I2C_MasterRequestRead+0x194>)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f8dc 	bl	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e054      	b.n	8002e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d6e:	897b      	ldrh	r3, [r7, #10]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4929      	ldr	r1, [pc, #164]	; (8002e24 <I2C_MasterRequestRead+0x198>)
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f8cc 	bl	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e044      	b.n	8002e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002db2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f831 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dda:	d103      	bne.n	8002de4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e017      	b.n	8002e18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002de8:	897b      	ldrh	r3, [r7, #10]
 8002dea:	11db      	asrs	r3, r3, #7
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 0306 	and.w	r3, r3, #6
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f063 030e 	orn	r3, r3, #14
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4907      	ldr	r1, [pc, #28]	; (8002e24 <I2C_MasterRequestRead+0x198>)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f888 	bl	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	00010008 	.word	0x00010008
 8002e24:	00010002 	.word	0x00010002

08002e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e38:	e048      	b.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d044      	beq.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e42:	f7fe fca3 	bl	800178c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d139      	bne.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	0c1b      	lsrs	r3, r3, #16
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d10d      	bne.n	8002e7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	43da      	mvns	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	e00c      	b.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	43da      	mvns	r2, r3
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d116      	bne.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e023      	b.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	0c1b      	lsrs	r3, r3, #16
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d10d      	bne.n	8002ef2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	43da      	mvns	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	e00c      	b.n	8002f0c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	4013      	ands	r3, r2
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf0c      	ite	eq
 8002f04:	2301      	moveq	r3, #1
 8002f06:	2300      	movne	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d093      	beq.n	8002e3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2a:	e071      	b.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3a:	d123      	bne.n	8002f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f043 0204 	orr.w	r2, r3, #4
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e067      	b.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d041      	beq.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8c:	f7fe fbfe 	bl	800178c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d302      	bcc.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d136      	bne.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d10c      	bne.n	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf14      	ite	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	2300      	moveq	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	e00b      	b.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	43da      	mvns	r2, r3
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d016      	beq.n	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e021      	b.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	0c1b      	lsrs	r3, r3, #16
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d10c      	bne.n	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	43da      	mvns	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4013      	ands	r3, r2
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e00b      	b.n	800304c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4013      	ands	r3, r2
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	f47f af6d 	bne.w	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3710      	adds	r7, #16
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003068:	e034      	b.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f8e3 	bl	8003236 <I2C_IsAcknowledgeFailed>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e034      	b.n	80030e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d028      	beq.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003082:	f7fe fb83 	bl	800178c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	429a      	cmp	r2, r3
 8003090:	d302      	bcc.n	8003098 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d11d      	bne.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b80      	cmp	r3, #128	; 0x80
 80030a4:	d016      	beq.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e007      	b.n	80030e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b80      	cmp	r3, #128	; 0x80
 80030e0:	d1c3      	bne.n	800306a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030f8:	e034      	b.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f89b 	bl	8003236 <I2C_IsAcknowledgeFailed>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e034      	b.n	8003174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003110:	d028      	beq.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003112:	f7fe fb3b 	bl	800178c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	429a      	cmp	r2, r3
 8003120:	d302      	bcc.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d11d      	bne.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b04      	cmp	r3, #4
 8003134:	d016      	beq.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f043 0220 	orr.w	r2, r3, #32
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e007      	b.n	8003174 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b04      	cmp	r3, #4
 8003170:	d1c3      	bne.n	80030fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003188:	e049      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	2b10      	cmp	r3, #16
 8003196:	d119      	bne.n	80031cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0210 	mvn.w	r2, #16
 80031a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e030      	b.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031cc:	f7fe fade 	bl	800178c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d302      	bcc.n	80031e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d11d      	bne.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ec:	2b40      	cmp	r3, #64	; 0x40
 80031ee:	d016      	beq.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f043 0220 	orr.w	r2, r3, #32
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e007      	b.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d1ae      	bne.n	800318a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800324c:	d11b      	bne.n	8003286 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003256:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0204 	orr.w	r2, r3, #4
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e267      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d075      	beq.n	800339e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032b2:	4b88      	ldr	r3, [pc, #544]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d00c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032be:	4b85      	ldr	r3, [pc, #532]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d112      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ca:	4b82      	ldr	r3, [pc, #520]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	4b7e      	ldr	r3, [pc, #504]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d05b      	beq.n	800339c <HAL_RCC_OscConfig+0x108>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d157      	bne.n	800339c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e242      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f8:	d106      	bne.n	8003308 <HAL_RCC_OscConfig+0x74>
 80032fa:	4b76      	ldr	r3, [pc, #472]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a75      	ldr	r2, [pc, #468]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e01d      	b.n	8003344 <HAL_RCC_OscConfig+0xb0>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x98>
 8003312:	4b70      	ldr	r3, [pc, #448]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a6f      	ldr	r2, [pc, #444]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b6d      	ldr	r3, [pc, #436]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a6c      	ldr	r2, [pc, #432]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0xb0>
 800332c:	4b69      	ldr	r3, [pc, #420]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a68      	ldr	r2, [pc, #416]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b66      	ldr	r3, [pc, #408]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a65      	ldr	r2, [pc, #404]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 800333e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d013      	beq.n	8003374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334c:	f7fe fa1e 	bl	800178c <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe fa1a 	bl	800178c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e207      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	4b5b      	ldr	r3, [pc, #364]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0xc0>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fa0a 	bl	800178c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe fa06 	bl	800178c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1f3      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0xe8>
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d063      	beq.n	8003472 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033aa:	4b4a      	ldr	r3, [pc, #296]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d11c      	bne.n	80033fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033c2:	4b44      	ldr	r3, [pc, #272]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d116      	bne.n	80033fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ce:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_RCC_OscConfig+0x152>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d001      	beq.n	80033e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e1c7      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4937      	ldr	r1, [pc, #220]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fa:	e03a      	b.n	8003472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d020      	beq.n	8003446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003404:	4b34      	ldr	r3, [pc, #208]	; (80034d8 <HAL_RCC_OscConfig+0x244>)
 8003406:	2201      	movs	r2, #1
 8003408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340a:	f7fe f9bf 	bl	800178c <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003410:	e008      	b.n	8003424 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003412:	f7fe f9bb 	bl	800178c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e1a8      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	4b2b      	ldr	r3, [pc, #172]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0f0      	beq.n	8003412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003430:	4b28      	ldr	r3, [pc, #160]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4925      	ldr	r1, [pc, #148]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003440:	4313      	orrs	r3, r2
 8003442:	600b      	str	r3, [r1, #0]
 8003444:	e015      	b.n	8003472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003446:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_RCC_OscConfig+0x244>)
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe f99e 	bl	800178c <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003454:	f7fe f99a 	bl	800178c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e187      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d036      	beq.n	80034ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d016      	beq.n	80034b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003486:	4b15      	ldr	r3, [pc, #84]	; (80034dc <HAL_RCC_OscConfig+0x248>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7fe f97e 	bl	800178c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003494:	f7fe f97a 	bl	800178c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e167      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_RCC_OscConfig+0x240>)
 80034a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0x200>
 80034b2:	e01b      	b.n	80034ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_OscConfig+0x248>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ba:	f7fe f967 	bl	800178c <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c0:	e00e      	b.n	80034e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c2:	f7fe f963 	bl	800178c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d907      	bls.n	80034e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e150      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
 80034d4:	40023800 	.word	0x40023800
 80034d8:	42470000 	.word	0x42470000
 80034dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	4b88      	ldr	r3, [pc, #544]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 80034e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ea      	bne.n	80034c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8097 	beq.w	8003628 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fe:	4b81      	ldr	r3, [pc, #516]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	4b7d      	ldr	r3, [pc, #500]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a7c      	ldr	r2, [pc, #496]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b7a      	ldr	r3, [pc, #488]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	4b77      	ldr	r3, [pc, #476]	; (8003708 <HAL_RCC_OscConfig+0x474>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d118      	bne.n	8003568 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003536:	4b74      	ldr	r3, [pc, #464]	; (8003708 <HAL_RCC_OscConfig+0x474>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a73      	ldr	r2, [pc, #460]	; (8003708 <HAL_RCC_OscConfig+0x474>)
 800353c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003542:	f7fe f923 	bl	800178c <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354a:	f7fe f91f 	bl	800178c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e10c      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355c:	4b6a      	ldr	r3, [pc, #424]	; (8003708 <HAL_RCC_OscConfig+0x474>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d106      	bne.n	800357e <HAL_RCC_OscConfig+0x2ea>
 8003570:	4b64      	ldr	r3, [pc, #400]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a63      	ldr	r2, [pc, #396]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003576:	f043 0301 	orr.w	r3, r3, #1
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
 800357c:	e01c      	b.n	80035b8 <HAL_RCC_OscConfig+0x324>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b05      	cmp	r3, #5
 8003584:	d10c      	bne.n	80035a0 <HAL_RCC_OscConfig+0x30c>
 8003586:	4b5f      	ldr	r3, [pc, #380]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	4a5e      	ldr	r2, [pc, #376]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 800358c:	f043 0304 	orr.w	r3, r3, #4
 8003590:	6713      	str	r3, [r2, #112]	; 0x70
 8003592:	4b5c      	ldr	r3, [pc, #368]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	4a5b      	ldr	r2, [pc, #364]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	6713      	str	r3, [r2, #112]	; 0x70
 800359e:	e00b      	b.n	80035b8 <HAL_RCC_OscConfig+0x324>
 80035a0:	4b58      	ldr	r3, [pc, #352]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a57      	ldr	r2, [pc, #348]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	4b55      	ldr	r3, [pc, #340]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a54      	ldr	r2, [pc, #336]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 80035b2:	f023 0304 	bic.w	r3, r3, #4
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d015      	beq.n	80035ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c0:	f7fe f8e4 	bl	800178c <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c6:	e00a      	b.n	80035de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c8:	f7fe f8e0 	bl	800178c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0cb      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035de:	4b49      	ldr	r3, [pc, #292]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0ee      	beq.n	80035c8 <HAL_RCC_OscConfig+0x334>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7fe f8ce 	bl	800178c <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f2:	e00a      	b.n	800360a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fe f8ca 	bl	800178c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e0b5      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360a:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1ee      	bne.n	80035f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d105      	bne.n	8003628 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800361c:	4b39      	ldr	r3, [pc, #228]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	4a38      	ldr	r2, [pc, #224]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003626:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 80a1 	beq.w	8003774 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003632:	4b34      	ldr	r3, [pc, #208]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b08      	cmp	r3, #8
 800363c:	d05c      	beq.n	80036f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d141      	bne.n	80036ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003646:	4b31      	ldr	r3, [pc, #196]	; (800370c <HAL_RCC_OscConfig+0x478>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fe f89e 	bl	800178c <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003654:	f7fe f89a 	bl	800178c <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e087      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003666:	4b27      	ldr	r3, [pc, #156]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	019b      	lsls	r3, r3, #6
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	085b      	lsrs	r3, r3, #1
 800368a:	3b01      	subs	r3, #1
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	061b      	lsls	r3, r3, #24
 8003696:	491b      	ldr	r1, [pc, #108]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_RCC_OscConfig+0x478>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a2:	f7fe f873 	bl	800178c <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036aa:	f7fe f86f 	bl	800178c <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e05c      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x416>
 80036c8:	e054      	b.n	8003774 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_RCC_OscConfig+0x478>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fe f85c 	bl	800178c <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fe f858 	bl	800178c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e045      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_RCC_OscConfig+0x470>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x444>
 80036f6:	e03d      	b.n	8003774 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e038      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
 8003704:	40023800 	.word	0x40023800
 8003708:	40007000 	.word	0x40007000
 800370c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x4ec>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d028      	beq.n	8003770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d121      	bne.n	8003770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	429a      	cmp	r2, r3
 8003738:	d11a      	bne.n	8003770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003740:	4013      	ands	r3, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003746:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003748:	4293      	cmp	r3, r2
 800374a:	d111      	bne.n	8003770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	3b01      	subs	r3, #1
 800375a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d107      	bne.n	8003770 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800

08003784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0cc      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003798:	4b68      	ldr	r3, [pc, #416]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d90c      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a6:	4b65      	ldr	r3, [pc, #404]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b63      	ldr	r3, [pc, #396]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0b8      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d8:	4b59      	ldr	r3, [pc, #356]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a58      	ldr	r2, [pc, #352]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a52      	ldr	r2, [pc, #328]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037fc:	4b50      	ldr	r3, [pc, #320]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	494d      	ldr	r1, [pc, #308]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d044      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d107      	bne.n	8003832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003822:	4b47      	ldr	r3, [pc, #284]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d119      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d003      	beq.n	8003842 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383e:	2b03      	cmp	r3, #3
 8003840:	d107      	bne.n	8003852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	4b3f      	ldr	r3, [pc, #252]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e06f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003852:	4b3b      	ldr	r3, [pc, #236]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e067      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003862:	4b37      	ldr	r3, [pc, #220]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f023 0203 	bic.w	r2, r3, #3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4934      	ldr	r1, [pc, #208]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003874:	f7fd ff8a 	bl	800178c <HAL_GetTick>
 8003878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387a:	e00a      	b.n	8003892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387c:	f7fd ff86 	bl	800178c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e04f      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003892:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 020c 	and.w	r2, r3, #12
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d1eb      	bne.n	800387c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038a4:	4b25      	ldr	r3, [pc, #148]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d20c      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b2:	4b22      	ldr	r3, [pc, #136]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d001      	beq.n	80038cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e032      	b.n	8003932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d8:	4b19      	ldr	r3, [pc, #100]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	4916      	ldr	r1, [pc, #88]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f6:	4b12      	ldr	r3, [pc, #72]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	490e      	ldr	r1, [pc, #56]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800390a:	f000 f821 	bl	8003950 <HAL_RCC_GetSysClockFreq>
 800390e:	4602      	mov	r2, r0
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 030f 	and.w	r3, r3, #15
 800391a:	490a      	ldr	r1, [pc, #40]	; (8003944 <HAL_RCC_ClockConfig+0x1c0>)
 800391c:	5ccb      	ldrb	r3, [r1, r3]
 800391e:	fa22 f303 	lsr.w	r3, r2, r3
 8003922:	4a09      	ldr	r2, [pc, #36]	; (8003948 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd feea 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023c00 	.word	0x40023c00
 8003940:	40023800 	.word	0x40023800
 8003944:	08004aec 	.word	0x08004aec
 8003948:	20000000 	.word	0x20000000
 800394c:	20000004 	.word	0x20000004

08003950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003954:	b090      	sub	sp, #64	; 0x40
 8003956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	637b      	str	r3, [r7, #52]	; 0x34
 800395c:	2300      	movs	r3, #0
 800395e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003960:	2300      	movs	r3, #0
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003968:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 030c 	and.w	r3, r3, #12
 8003970:	2b08      	cmp	r3, #8
 8003972:	d00d      	beq.n	8003990 <HAL_RCC_GetSysClockFreq+0x40>
 8003974:	2b08      	cmp	r3, #8
 8003976:	f200 80a1 	bhi.w	8003abc <HAL_RCC_GetSysClockFreq+0x16c>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x34>
 800397e:	2b04      	cmp	r3, #4
 8003980:	d003      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x3a>
 8003982:	e09b      	b.n	8003abc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003986:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003988:	e09b      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800398a:	4b53      	ldr	r3, [pc, #332]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x188>)
 800398c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800398e:	e098      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003990:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003998:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800399a:	4b4d      	ldr	r3, [pc, #308]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d028      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a6:	4b4a      	ldr	r3, [pc, #296]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	099b      	lsrs	r3, r3, #6
 80039ac:	2200      	movs	r2, #0
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	627a      	str	r2, [r7, #36]	; 0x24
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039b8:	2100      	movs	r1, #0
 80039ba:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039bc:	fb03 f201 	mul.w	r2, r3, r1
 80039c0:	2300      	movs	r3, #0
 80039c2:	fb00 f303 	mul.w	r3, r0, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	4a43      	ldr	r2, [pc, #268]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039ca:	fba0 1202 	umull	r1, r2, r0, r2
 80039ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d0:	460a      	mov	r2, r1
 80039d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80039d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d6:	4413      	add	r3, r2
 80039d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039dc:	2200      	movs	r2, #0
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	61fa      	str	r2, [r7, #28]
 80039e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039ea:	f7fd f85f 	bl	8000aac <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4613      	mov	r3, r2
 80039f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f6:	e053      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f8:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	2200      	movs	r2, #0
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	617a      	str	r2, [r7, #20]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a0a:	f04f 0b00 	mov.w	fp, #0
 8003a0e:	4652      	mov	r2, sl
 8003a10:	465b      	mov	r3, fp
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f04f 0100 	mov.w	r1, #0
 8003a1a:	0159      	lsls	r1, r3, #5
 8003a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a20:	0150      	lsls	r0, r2, #5
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	ebb2 080a 	subs.w	r8, r2, sl
 8003a2a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a42:	ebb2 0408 	subs.w	r4, r2, r8
 8003a46:	eb63 0509 	sbc.w	r5, r3, r9
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	00eb      	lsls	r3, r5, #3
 8003a54:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a58:	00e2      	lsls	r2, r4, #3
 8003a5a:	4614      	mov	r4, r2
 8003a5c:	461d      	mov	r5, r3
 8003a5e:	eb14 030a 	adds.w	r3, r4, sl
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	eb45 030b 	adc.w	r3, r5, fp
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a76:	4629      	mov	r1, r5
 8003a78:	028b      	lsls	r3, r1, #10
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a80:	4621      	mov	r1, r4
 8003a82:	028a      	lsls	r2, r1, #10
 8003a84:	4610      	mov	r0, r2
 8003a86:	4619      	mov	r1, r3
 8003a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	60fa      	str	r2, [r7, #12]
 8003a90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a94:	f7fd f80a 	bl	8000aac <__aeabi_uldivmod>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ab0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aba:	e002      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3740      	adds	r7, #64	; 0x40
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	00f42400 	.word	0x00f42400
 8003ad8:	017d7840 	.word	0x017d7840

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000000 	.word	0x20000000

08003af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003af8:	f7ff fff0 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	0a9b      	lsrs	r3, r3, #10
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4903      	ldr	r1, [pc, #12]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	08004afc 	.word	0x08004afc

08003b1c <std>:
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	4604      	mov	r4, r0
 8003b22:	e9c0 3300 	strd	r3, r3, [r0]
 8003b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b2a:	6083      	str	r3, [r0, #8]
 8003b2c:	8181      	strh	r1, [r0, #12]
 8003b2e:	6643      	str	r3, [r0, #100]	; 0x64
 8003b30:	81c2      	strh	r2, [r0, #14]
 8003b32:	6183      	str	r3, [r0, #24]
 8003b34:	4619      	mov	r1, r3
 8003b36:	2208      	movs	r2, #8
 8003b38:	305c      	adds	r0, #92	; 0x5c
 8003b3a:	f000 f9f7 	bl	8003f2c <memset>
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <std+0x58>)
 8003b40:	6263      	str	r3, [r4, #36]	; 0x24
 8003b42:	4b0d      	ldr	r3, [pc, #52]	; (8003b78 <std+0x5c>)
 8003b44:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b46:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <std+0x60>)
 8003b48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <std+0x64>)
 8003b4c:	6323      	str	r3, [r4, #48]	; 0x30
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <std+0x68>)
 8003b50:	6224      	str	r4, [r4, #32]
 8003b52:	429c      	cmp	r4, r3
 8003b54:	d006      	beq.n	8003b64 <std+0x48>
 8003b56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003b5a:	4294      	cmp	r4, r2
 8003b5c:	d002      	beq.n	8003b64 <std+0x48>
 8003b5e:	33d0      	adds	r3, #208	; 0xd0
 8003b60:	429c      	cmp	r4, r3
 8003b62:	d105      	bne.n	8003b70 <std+0x54>
 8003b64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b6c:	f000 ba56 	b.w	800401c <__retarget_lock_init_recursive>
 8003b70:	bd10      	pop	{r4, pc}
 8003b72:	bf00      	nop
 8003b74:	08003d7d 	.word	0x08003d7d
 8003b78:	08003d9f 	.word	0x08003d9f
 8003b7c:	08003dd7 	.word	0x08003dd7
 8003b80:	08003dfb 	.word	0x08003dfb
 8003b84:	20000100 	.word	0x20000100

08003b88 <stdio_exit_handler>:
 8003b88:	4a02      	ldr	r2, [pc, #8]	; (8003b94 <stdio_exit_handler+0xc>)
 8003b8a:	4903      	ldr	r1, [pc, #12]	; (8003b98 <stdio_exit_handler+0x10>)
 8003b8c:	4803      	ldr	r0, [pc, #12]	; (8003b9c <stdio_exit_handler+0x14>)
 8003b8e:	f000 b869 	b.w	8003c64 <_fwalk_sglue>
 8003b92:	bf00      	nop
 8003b94:	2000000c 	.word	0x2000000c
 8003b98:	080048c9 	.word	0x080048c9
 8003b9c:	20000018 	.word	0x20000018

08003ba0 <cleanup_stdio>:
 8003ba0:	6841      	ldr	r1, [r0, #4]
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <cleanup_stdio+0x34>)
 8003ba4:	4299      	cmp	r1, r3
 8003ba6:	b510      	push	{r4, lr}
 8003ba8:	4604      	mov	r4, r0
 8003baa:	d001      	beq.n	8003bb0 <cleanup_stdio+0x10>
 8003bac:	f000 fe8c 	bl	80048c8 <_fflush_r>
 8003bb0:	68a1      	ldr	r1, [r4, #8]
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <cleanup_stdio+0x38>)
 8003bb4:	4299      	cmp	r1, r3
 8003bb6:	d002      	beq.n	8003bbe <cleanup_stdio+0x1e>
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f000 fe85 	bl	80048c8 <_fflush_r>
 8003bbe:	68e1      	ldr	r1, [r4, #12]
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <cleanup_stdio+0x3c>)
 8003bc2:	4299      	cmp	r1, r3
 8003bc4:	d004      	beq.n	8003bd0 <cleanup_stdio+0x30>
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bcc:	f000 be7c 	b.w	80048c8 <_fflush_r>
 8003bd0:	bd10      	pop	{r4, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000100 	.word	0x20000100
 8003bd8:	20000168 	.word	0x20000168
 8003bdc:	200001d0 	.word	0x200001d0

08003be0 <global_stdio_init.part.0>:
 8003be0:	b510      	push	{r4, lr}
 8003be2:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <global_stdio_init.part.0+0x30>)
 8003be4:	4c0b      	ldr	r4, [pc, #44]	; (8003c14 <global_stdio_init.part.0+0x34>)
 8003be6:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <global_stdio_init.part.0+0x38>)
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	4620      	mov	r0, r4
 8003bec:	2200      	movs	r2, #0
 8003bee:	2104      	movs	r1, #4
 8003bf0:	f7ff ff94 	bl	8003b1c <std>
 8003bf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	2109      	movs	r1, #9
 8003bfc:	f7ff ff8e 	bl	8003b1c <std>
 8003c00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c04:	2202      	movs	r2, #2
 8003c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c0a:	2112      	movs	r1, #18
 8003c0c:	f7ff bf86 	b.w	8003b1c <std>
 8003c10:	20000238 	.word	0x20000238
 8003c14:	20000100 	.word	0x20000100
 8003c18:	08003b89 	.word	0x08003b89

08003c1c <__sfp_lock_acquire>:
 8003c1c:	4801      	ldr	r0, [pc, #4]	; (8003c24 <__sfp_lock_acquire+0x8>)
 8003c1e:	f000 b9fe 	b.w	800401e <__retarget_lock_acquire_recursive>
 8003c22:	bf00      	nop
 8003c24:	20000241 	.word	0x20000241

08003c28 <__sfp_lock_release>:
 8003c28:	4801      	ldr	r0, [pc, #4]	; (8003c30 <__sfp_lock_release+0x8>)
 8003c2a:	f000 b9f9 	b.w	8004020 <__retarget_lock_release_recursive>
 8003c2e:	bf00      	nop
 8003c30:	20000241 	.word	0x20000241

08003c34 <__sinit>:
 8003c34:	b510      	push	{r4, lr}
 8003c36:	4604      	mov	r4, r0
 8003c38:	f7ff fff0 	bl	8003c1c <__sfp_lock_acquire>
 8003c3c:	6a23      	ldr	r3, [r4, #32]
 8003c3e:	b11b      	cbz	r3, 8003c48 <__sinit+0x14>
 8003c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c44:	f7ff bff0 	b.w	8003c28 <__sfp_lock_release>
 8003c48:	4b04      	ldr	r3, [pc, #16]	; (8003c5c <__sinit+0x28>)
 8003c4a:	6223      	str	r3, [r4, #32]
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <__sinit+0x2c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f5      	bne.n	8003c40 <__sinit+0xc>
 8003c54:	f7ff ffc4 	bl	8003be0 <global_stdio_init.part.0>
 8003c58:	e7f2      	b.n	8003c40 <__sinit+0xc>
 8003c5a:	bf00      	nop
 8003c5c:	08003ba1 	.word	0x08003ba1
 8003c60:	20000238 	.word	0x20000238

08003c64 <_fwalk_sglue>:
 8003c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c68:	4607      	mov	r7, r0
 8003c6a:	4688      	mov	r8, r1
 8003c6c:	4614      	mov	r4, r2
 8003c6e:	2600      	movs	r6, #0
 8003c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c74:	f1b9 0901 	subs.w	r9, r9, #1
 8003c78:	d505      	bpl.n	8003c86 <_fwalk_sglue+0x22>
 8003c7a:	6824      	ldr	r4, [r4, #0]
 8003c7c:	2c00      	cmp	r4, #0
 8003c7e:	d1f7      	bne.n	8003c70 <_fwalk_sglue+0xc>
 8003c80:	4630      	mov	r0, r6
 8003c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c86:	89ab      	ldrh	r3, [r5, #12]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d907      	bls.n	8003c9c <_fwalk_sglue+0x38>
 8003c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c90:	3301      	adds	r3, #1
 8003c92:	d003      	beq.n	8003c9c <_fwalk_sglue+0x38>
 8003c94:	4629      	mov	r1, r5
 8003c96:	4638      	mov	r0, r7
 8003c98:	47c0      	blx	r8
 8003c9a:	4306      	orrs	r6, r0
 8003c9c:	3568      	adds	r5, #104	; 0x68
 8003c9e:	e7e9      	b.n	8003c74 <_fwalk_sglue+0x10>

08003ca0 <iprintf>:
 8003ca0:	b40f      	push	{r0, r1, r2, r3}
 8003ca2:	b507      	push	{r0, r1, r2, lr}
 8003ca4:	4906      	ldr	r1, [pc, #24]	; (8003cc0 <iprintf+0x20>)
 8003ca6:	ab04      	add	r3, sp, #16
 8003ca8:	6808      	ldr	r0, [r1, #0]
 8003caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cae:	6881      	ldr	r1, [r0, #8]
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	f000 fad9 	bl	8004268 <_vfiprintf_r>
 8003cb6:	b003      	add	sp, #12
 8003cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cbc:	b004      	add	sp, #16
 8003cbe:	4770      	bx	lr
 8003cc0:	20000064 	.word	0x20000064

08003cc4 <_puts_r>:
 8003cc4:	6a03      	ldr	r3, [r0, #32]
 8003cc6:	b570      	push	{r4, r5, r6, lr}
 8003cc8:	6884      	ldr	r4, [r0, #8]
 8003cca:	4605      	mov	r5, r0
 8003ccc:	460e      	mov	r6, r1
 8003cce:	b90b      	cbnz	r3, 8003cd4 <_puts_r+0x10>
 8003cd0:	f7ff ffb0 	bl	8003c34 <__sinit>
 8003cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cd6:	07db      	lsls	r3, r3, #31
 8003cd8:	d405      	bmi.n	8003ce6 <_puts_r+0x22>
 8003cda:	89a3      	ldrh	r3, [r4, #12]
 8003cdc:	0598      	lsls	r0, r3, #22
 8003cde:	d402      	bmi.n	8003ce6 <_puts_r+0x22>
 8003ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ce2:	f000 f99c 	bl	800401e <__retarget_lock_acquire_recursive>
 8003ce6:	89a3      	ldrh	r3, [r4, #12]
 8003ce8:	0719      	lsls	r1, r3, #28
 8003cea:	d513      	bpl.n	8003d14 <_puts_r+0x50>
 8003cec:	6923      	ldr	r3, [r4, #16]
 8003cee:	b18b      	cbz	r3, 8003d14 <_puts_r+0x50>
 8003cf0:	3e01      	subs	r6, #1
 8003cf2:	68a3      	ldr	r3, [r4, #8]
 8003cf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	60a3      	str	r3, [r4, #8]
 8003cfc:	b9e9      	cbnz	r1, 8003d3a <_puts_r+0x76>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	da2e      	bge.n	8003d60 <_puts_r+0x9c>
 8003d02:	4622      	mov	r2, r4
 8003d04:	210a      	movs	r1, #10
 8003d06:	4628      	mov	r0, r5
 8003d08:	f000 f87b 	bl	8003e02 <__swbuf_r>
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	d007      	beq.n	8003d20 <_puts_r+0x5c>
 8003d10:	250a      	movs	r5, #10
 8003d12:	e007      	b.n	8003d24 <_puts_r+0x60>
 8003d14:	4621      	mov	r1, r4
 8003d16:	4628      	mov	r0, r5
 8003d18:	f000 f8b0 	bl	8003e7c <__swsetup_r>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d0e7      	beq.n	8003cf0 <_puts_r+0x2c>
 8003d20:	f04f 35ff 	mov.w	r5, #4294967295
 8003d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d26:	07da      	lsls	r2, r3, #31
 8003d28:	d405      	bmi.n	8003d36 <_puts_r+0x72>
 8003d2a:	89a3      	ldrh	r3, [r4, #12]
 8003d2c:	059b      	lsls	r3, r3, #22
 8003d2e:	d402      	bmi.n	8003d36 <_puts_r+0x72>
 8003d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d32:	f000 f975 	bl	8004020 <__retarget_lock_release_recursive>
 8003d36:	4628      	mov	r0, r5
 8003d38:	bd70      	pop	{r4, r5, r6, pc}
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	da04      	bge.n	8003d48 <_puts_r+0x84>
 8003d3e:	69a2      	ldr	r2, [r4, #24]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	dc06      	bgt.n	8003d52 <_puts_r+0x8e>
 8003d44:	290a      	cmp	r1, #10
 8003d46:	d004      	beq.n	8003d52 <_puts_r+0x8e>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	6022      	str	r2, [r4, #0]
 8003d4e:	7019      	strb	r1, [r3, #0]
 8003d50:	e7cf      	b.n	8003cf2 <_puts_r+0x2e>
 8003d52:	4622      	mov	r2, r4
 8003d54:	4628      	mov	r0, r5
 8003d56:	f000 f854 	bl	8003e02 <__swbuf_r>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	d1c9      	bne.n	8003cf2 <_puts_r+0x2e>
 8003d5e:	e7df      	b.n	8003d20 <_puts_r+0x5c>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	250a      	movs	r5, #10
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	6022      	str	r2, [r4, #0]
 8003d68:	701d      	strb	r5, [r3, #0]
 8003d6a:	e7db      	b.n	8003d24 <_puts_r+0x60>

08003d6c <puts>:
 8003d6c:	4b02      	ldr	r3, [pc, #8]	; (8003d78 <puts+0xc>)
 8003d6e:	4601      	mov	r1, r0
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	f7ff bfa7 	b.w	8003cc4 <_puts_r>
 8003d76:	bf00      	nop
 8003d78:	20000064 	.word	0x20000064

08003d7c <__sread>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	460c      	mov	r4, r1
 8003d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d84:	f000 f8fc 	bl	8003f80 <_read_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	bfab      	itete	ge
 8003d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003d90:	181b      	addge	r3, r3, r0
 8003d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d96:	bfac      	ite	ge
 8003d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d9a:	81a3      	strhlt	r3, [r4, #12]
 8003d9c:	bd10      	pop	{r4, pc}

08003d9e <__swrite>:
 8003d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da2:	461f      	mov	r7, r3
 8003da4:	898b      	ldrh	r3, [r1, #12]
 8003da6:	05db      	lsls	r3, r3, #23
 8003da8:	4605      	mov	r5, r0
 8003daa:	460c      	mov	r4, r1
 8003dac:	4616      	mov	r6, r2
 8003dae:	d505      	bpl.n	8003dbc <__swrite+0x1e>
 8003db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db4:	2302      	movs	r3, #2
 8003db6:	2200      	movs	r2, #0
 8003db8:	f000 f8d0 	bl	8003f5c <_lseek_r>
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dc6:	81a3      	strh	r3, [r4, #12]
 8003dc8:	4632      	mov	r2, r6
 8003dca:	463b      	mov	r3, r7
 8003dcc:	4628      	mov	r0, r5
 8003dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd2:	f000 b8e7 	b.w	8003fa4 <_write_r>

08003dd6 <__sseek>:
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	460c      	mov	r4, r1
 8003dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dde:	f000 f8bd 	bl	8003f5c <_lseek_r>
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	89a3      	ldrh	r3, [r4, #12]
 8003de6:	bf15      	itete	ne
 8003de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003df2:	81a3      	strheq	r3, [r4, #12]
 8003df4:	bf18      	it	ne
 8003df6:	81a3      	strhne	r3, [r4, #12]
 8003df8:	bd10      	pop	{r4, pc}

08003dfa <__sclose>:
 8003dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dfe:	f000 b89d 	b.w	8003f3c <_close_r>

08003e02 <__swbuf_r>:
 8003e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e04:	460e      	mov	r6, r1
 8003e06:	4614      	mov	r4, r2
 8003e08:	4605      	mov	r5, r0
 8003e0a:	b118      	cbz	r0, 8003e14 <__swbuf_r+0x12>
 8003e0c:	6a03      	ldr	r3, [r0, #32]
 8003e0e:	b90b      	cbnz	r3, 8003e14 <__swbuf_r+0x12>
 8003e10:	f7ff ff10 	bl	8003c34 <__sinit>
 8003e14:	69a3      	ldr	r3, [r4, #24]
 8003e16:	60a3      	str	r3, [r4, #8]
 8003e18:	89a3      	ldrh	r3, [r4, #12]
 8003e1a:	071a      	lsls	r2, r3, #28
 8003e1c:	d525      	bpl.n	8003e6a <__swbuf_r+0x68>
 8003e1e:	6923      	ldr	r3, [r4, #16]
 8003e20:	b31b      	cbz	r3, 8003e6a <__swbuf_r+0x68>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	6922      	ldr	r2, [r4, #16]
 8003e26:	1a98      	subs	r0, r3, r2
 8003e28:	6963      	ldr	r3, [r4, #20]
 8003e2a:	b2f6      	uxtb	r6, r6
 8003e2c:	4283      	cmp	r3, r0
 8003e2e:	4637      	mov	r7, r6
 8003e30:	dc04      	bgt.n	8003e3c <__swbuf_r+0x3a>
 8003e32:	4621      	mov	r1, r4
 8003e34:	4628      	mov	r0, r5
 8003e36:	f000 fd47 	bl	80048c8 <_fflush_r>
 8003e3a:	b9e0      	cbnz	r0, 8003e76 <__swbuf_r+0x74>
 8003e3c:	68a3      	ldr	r3, [r4, #8]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	60a3      	str	r3, [r4, #8]
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	6022      	str	r2, [r4, #0]
 8003e48:	701e      	strb	r6, [r3, #0]
 8003e4a:	6962      	ldr	r2, [r4, #20]
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d004      	beq.n	8003e5c <__swbuf_r+0x5a>
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	07db      	lsls	r3, r3, #31
 8003e56:	d506      	bpl.n	8003e66 <__swbuf_r+0x64>
 8003e58:	2e0a      	cmp	r6, #10
 8003e5a:	d104      	bne.n	8003e66 <__swbuf_r+0x64>
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f000 fd32 	bl	80048c8 <_fflush_r>
 8003e64:	b938      	cbnz	r0, 8003e76 <__swbuf_r+0x74>
 8003e66:	4638      	mov	r0, r7
 8003e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	f000 f805 	bl	8003e7c <__swsetup_r>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d0d5      	beq.n	8003e22 <__swbuf_r+0x20>
 8003e76:	f04f 37ff 	mov.w	r7, #4294967295
 8003e7a:	e7f4      	b.n	8003e66 <__swbuf_r+0x64>

08003e7c <__swsetup_r>:
 8003e7c:	b538      	push	{r3, r4, r5, lr}
 8003e7e:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <__swsetup_r+0xac>)
 8003e80:	4605      	mov	r5, r0
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	460c      	mov	r4, r1
 8003e86:	b118      	cbz	r0, 8003e90 <__swsetup_r+0x14>
 8003e88:	6a03      	ldr	r3, [r0, #32]
 8003e8a:	b90b      	cbnz	r3, 8003e90 <__swsetup_r+0x14>
 8003e8c:	f7ff fed2 	bl	8003c34 <__sinit>
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e96:	0718      	lsls	r0, r3, #28
 8003e98:	d422      	bmi.n	8003ee0 <__swsetup_r+0x64>
 8003e9a:	06d9      	lsls	r1, r3, #27
 8003e9c:	d407      	bmi.n	8003eae <__swsetup_r+0x32>
 8003e9e:	2309      	movs	r3, #9
 8003ea0:	602b      	str	r3, [r5, #0]
 8003ea2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ea6:	81a3      	strh	r3, [r4, #12]
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	e034      	b.n	8003f18 <__swsetup_r+0x9c>
 8003eae:	0758      	lsls	r0, r3, #29
 8003eb0:	d512      	bpl.n	8003ed8 <__swsetup_r+0x5c>
 8003eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eb4:	b141      	cbz	r1, 8003ec8 <__swsetup_r+0x4c>
 8003eb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003eba:	4299      	cmp	r1, r3
 8003ebc:	d002      	beq.n	8003ec4 <__swsetup_r+0x48>
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	f000 f8b0 	bl	8004024 <_free_r>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	6363      	str	r3, [r4, #52]	; 0x34
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ece:	81a3      	strh	r3, [r4, #12]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6063      	str	r3, [r4, #4]
 8003ed4:	6923      	ldr	r3, [r4, #16]
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	f043 0308 	orr.w	r3, r3, #8
 8003ede:	81a3      	strh	r3, [r4, #12]
 8003ee0:	6923      	ldr	r3, [r4, #16]
 8003ee2:	b94b      	cbnz	r3, 8003ef8 <__swsetup_r+0x7c>
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eee:	d003      	beq.n	8003ef8 <__swsetup_r+0x7c>
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	f000 fd36 	bl	8004964 <__smakebuf_r>
 8003ef8:	89a0      	ldrh	r0, [r4, #12]
 8003efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003efe:	f010 0301 	ands.w	r3, r0, #1
 8003f02:	d00a      	beq.n	8003f1a <__swsetup_r+0x9e>
 8003f04:	2300      	movs	r3, #0
 8003f06:	60a3      	str	r3, [r4, #8]
 8003f08:	6963      	ldr	r3, [r4, #20]
 8003f0a:	425b      	negs	r3, r3
 8003f0c:	61a3      	str	r3, [r4, #24]
 8003f0e:	6923      	ldr	r3, [r4, #16]
 8003f10:	b943      	cbnz	r3, 8003f24 <__swsetup_r+0xa8>
 8003f12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f16:	d1c4      	bne.n	8003ea2 <__swsetup_r+0x26>
 8003f18:	bd38      	pop	{r3, r4, r5, pc}
 8003f1a:	0781      	lsls	r1, r0, #30
 8003f1c:	bf58      	it	pl
 8003f1e:	6963      	ldrpl	r3, [r4, #20]
 8003f20:	60a3      	str	r3, [r4, #8]
 8003f22:	e7f4      	b.n	8003f0e <__swsetup_r+0x92>
 8003f24:	2000      	movs	r0, #0
 8003f26:	e7f7      	b.n	8003f18 <__swsetup_r+0x9c>
 8003f28:	20000064 	.word	0x20000064

08003f2c <memset>:
 8003f2c:	4402      	add	r2, r0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d100      	bne.n	8003f36 <memset+0xa>
 8003f34:	4770      	bx	lr
 8003f36:	f803 1b01 	strb.w	r1, [r3], #1
 8003f3a:	e7f9      	b.n	8003f30 <memset+0x4>

08003f3c <_close_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4d06      	ldr	r5, [pc, #24]	; (8003f58 <_close_r+0x1c>)
 8003f40:	2300      	movs	r3, #0
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	602b      	str	r3, [r5, #0]
 8003f48:	f7fd fb13 	bl	8001572 <_close>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_close_r+0x1a>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_close_r+0x1a>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	2000023c 	.word	0x2000023c

08003f5c <_lseek_r>:
 8003f5c:	b538      	push	{r3, r4, r5, lr}
 8003f5e:	4d07      	ldr	r5, [pc, #28]	; (8003f7c <_lseek_r+0x20>)
 8003f60:	4604      	mov	r4, r0
 8003f62:	4608      	mov	r0, r1
 8003f64:	4611      	mov	r1, r2
 8003f66:	2200      	movs	r2, #0
 8003f68:	602a      	str	r2, [r5, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f7fd fb28 	bl	80015c0 <_lseek>
 8003f70:	1c43      	adds	r3, r0, #1
 8003f72:	d102      	bne.n	8003f7a <_lseek_r+0x1e>
 8003f74:	682b      	ldr	r3, [r5, #0]
 8003f76:	b103      	cbz	r3, 8003f7a <_lseek_r+0x1e>
 8003f78:	6023      	str	r3, [r4, #0]
 8003f7a:	bd38      	pop	{r3, r4, r5, pc}
 8003f7c:	2000023c 	.word	0x2000023c

08003f80 <_read_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4d07      	ldr	r5, [pc, #28]	; (8003fa0 <_read_r+0x20>)
 8003f84:	4604      	mov	r4, r0
 8003f86:	4608      	mov	r0, r1
 8003f88:	4611      	mov	r1, r2
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f7fd fab6 	bl	8001500 <_read>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_read_r+0x1e>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_read_r+0x1e>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	2000023c 	.word	0x2000023c

08003fa4 <_write_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d07      	ldr	r5, [pc, #28]	; (8003fc4 <_write_r+0x20>)
 8003fa8:	4604      	mov	r4, r0
 8003faa:	4608      	mov	r0, r1
 8003fac:	4611      	mov	r1, r2
 8003fae:	2200      	movs	r2, #0
 8003fb0:	602a      	str	r2, [r5, #0]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f7fd fac1 	bl	800153a <_write>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d102      	bne.n	8003fc2 <_write_r+0x1e>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	b103      	cbz	r3, 8003fc2 <_write_r+0x1e>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	bd38      	pop	{r3, r4, r5, pc}
 8003fc4:	2000023c 	.word	0x2000023c

08003fc8 <__errno>:
 8003fc8:	4b01      	ldr	r3, [pc, #4]	; (8003fd0 <__errno+0x8>)
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000064 	.word	0x20000064

08003fd4 <__libc_init_array>:
 8003fd4:	b570      	push	{r4, r5, r6, lr}
 8003fd6:	4d0d      	ldr	r5, [pc, #52]	; (800400c <__libc_init_array+0x38>)
 8003fd8:	4c0d      	ldr	r4, [pc, #52]	; (8004010 <__libc_init_array+0x3c>)
 8003fda:	1b64      	subs	r4, r4, r5
 8003fdc:	10a4      	asrs	r4, r4, #2
 8003fde:	2600      	movs	r6, #0
 8003fe0:	42a6      	cmp	r6, r4
 8003fe2:	d109      	bne.n	8003ff8 <__libc_init_array+0x24>
 8003fe4:	4d0b      	ldr	r5, [pc, #44]	; (8004014 <__libc_init_array+0x40>)
 8003fe6:	4c0c      	ldr	r4, [pc, #48]	; (8004018 <__libc_init_array+0x44>)
 8003fe8:	f000 fd2a 	bl	8004a40 <_init>
 8003fec:	1b64      	subs	r4, r4, r5
 8003fee:	10a4      	asrs	r4, r4, #2
 8003ff0:	2600      	movs	r6, #0
 8003ff2:	42a6      	cmp	r6, r4
 8003ff4:	d105      	bne.n	8004002 <__libc_init_array+0x2e>
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
 8003ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffc:	4798      	blx	r3
 8003ffe:	3601      	adds	r6, #1
 8004000:	e7ee      	b.n	8003fe0 <__libc_init_array+0xc>
 8004002:	f855 3b04 	ldr.w	r3, [r5], #4
 8004006:	4798      	blx	r3
 8004008:	3601      	adds	r6, #1
 800400a:	e7f2      	b.n	8003ff2 <__libc_init_array+0x1e>
 800400c:	08004b40 	.word	0x08004b40
 8004010:	08004b40 	.word	0x08004b40
 8004014:	08004b40 	.word	0x08004b40
 8004018:	08004b44 	.word	0x08004b44

0800401c <__retarget_lock_init_recursive>:
 800401c:	4770      	bx	lr

0800401e <__retarget_lock_acquire_recursive>:
 800401e:	4770      	bx	lr

08004020 <__retarget_lock_release_recursive>:
 8004020:	4770      	bx	lr
	...

08004024 <_free_r>:
 8004024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004026:	2900      	cmp	r1, #0
 8004028:	d044      	beq.n	80040b4 <_free_r+0x90>
 800402a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800402e:	9001      	str	r0, [sp, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f1a1 0404 	sub.w	r4, r1, #4
 8004036:	bfb8      	it	lt
 8004038:	18e4      	addlt	r4, r4, r3
 800403a:	f000 f8df 	bl	80041fc <__malloc_lock>
 800403e:	4a1e      	ldr	r2, [pc, #120]	; (80040b8 <_free_r+0x94>)
 8004040:	9801      	ldr	r0, [sp, #4]
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	b933      	cbnz	r3, 8004054 <_free_r+0x30>
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	6014      	str	r4, [r2, #0]
 800404a:	b003      	add	sp, #12
 800404c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004050:	f000 b8da 	b.w	8004208 <__malloc_unlock>
 8004054:	42a3      	cmp	r3, r4
 8004056:	d908      	bls.n	800406a <_free_r+0x46>
 8004058:	6825      	ldr	r5, [r4, #0]
 800405a:	1961      	adds	r1, r4, r5
 800405c:	428b      	cmp	r3, r1
 800405e:	bf01      	itttt	eq
 8004060:	6819      	ldreq	r1, [r3, #0]
 8004062:	685b      	ldreq	r3, [r3, #4]
 8004064:	1949      	addeq	r1, r1, r5
 8004066:	6021      	streq	r1, [r4, #0]
 8004068:	e7ed      	b.n	8004046 <_free_r+0x22>
 800406a:	461a      	mov	r2, r3
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	b10b      	cbz	r3, 8004074 <_free_r+0x50>
 8004070:	42a3      	cmp	r3, r4
 8004072:	d9fa      	bls.n	800406a <_free_r+0x46>
 8004074:	6811      	ldr	r1, [r2, #0]
 8004076:	1855      	adds	r5, r2, r1
 8004078:	42a5      	cmp	r5, r4
 800407a:	d10b      	bne.n	8004094 <_free_r+0x70>
 800407c:	6824      	ldr	r4, [r4, #0]
 800407e:	4421      	add	r1, r4
 8004080:	1854      	adds	r4, r2, r1
 8004082:	42a3      	cmp	r3, r4
 8004084:	6011      	str	r1, [r2, #0]
 8004086:	d1e0      	bne.n	800404a <_free_r+0x26>
 8004088:	681c      	ldr	r4, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	6053      	str	r3, [r2, #4]
 800408e:	440c      	add	r4, r1
 8004090:	6014      	str	r4, [r2, #0]
 8004092:	e7da      	b.n	800404a <_free_r+0x26>
 8004094:	d902      	bls.n	800409c <_free_r+0x78>
 8004096:	230c      	movs	r3, #12
 8004098:	6003      	str	r3, [r0, #0]
 800409a:	e7d6      	b.n	800404a <_free_r+0x26>
 800409c:	6825      	ldr	r5, [r4, #0]
 800409e:	1961      	adds	r1, r4, r5
 80040a0:	428b      	cmp	r3, r1
 80040a2:	bf04      	itt	eq
 80040a4:	6819      	ldreq	r1, [r3, #0]
 80040a6:	685b      	ldreq	r3, [r3, #4]
 80040a8:	6063      	str	r3, [r4, #4]
 80040aa:	bf04      	itt	eq
 80040ac:	1949      	addeq	r1, r1, r5
 80040ae:	6021      	streq	r1, [r4, #0]
 80040b0:	6054      	str	r4, [r2, #4]
 80040b2:	e7ca      	b.n	800404a <_free_r+0x26>
 80040b4:	b003      	add	sp, #12
 80040b6:	bd30      	pop	{r4, r5, pc}
 80040b8:	20000244 	.word	0x20000244

080040bc <sbrk_aligned>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	4e0e      	ldr	r6, [pc, #56]	; (80040f8 <sbrk_aligned+0x3c>)
 80040c0:	460c      	mov	r4, r1
 80040c2:	6831      	ldr	r1, [r6, #0]
 80040c4:	4605      	mov	r5, r0
 80040c6:	b911      	cbnz	r1, 80040ce <sbrk_aligned+0x12>
 80040c8:	f000 fcaa 	bl	8004a20 <_sbrk_r>
 80040cc:	6030      	str	r0, [r6, #0]
 80040ce:	4621      	mov	r1, r4
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 fca5 	bl	8004a20 <_sbrk_r>
 80040d6:	1c43      	adds	r3, r0, #1
 80040d8:	d00a      	beq.n	80040f0 <sbrk_aligned+0x34>
 80040da:	1cc4      	adds	r4, r0, #3
 80040dc:	f024 0403 	bic.w	r4, r4, #3
 80040e0:	42a0      	cmp	r0, r4
 80040e2:	d007      	beq.n	80040f4 <sbrk_aligned+0x38>
 80040e4:	1a21      	subs	r1, r4, r0
 80040e6:	4628      	mov	r0, r5
 80040e8:	f000 fc9a 	bl	8004a20 <_sbrk_r>
 80040ec:	3001      	adds	r0, #1
 80040ee:	d101      	bne.n	80040f4 <sbrk_aligned+0x38>
 80040f0:	f04f 34ff 	mov.w	r4, #4294967295
 80040f4:	4620      	mov	r0, r4
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	20000248 	.word	0x20000248

080040fc <_malloc_r>:
 80040fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004100:	1ccd      	adds	r5, r1, #3
 8004102:	f025 0503 	bic.w	r5, r5, #3
 8004106:	3508      	adds	r5, #8
 8004108:	2d0c      	cmp	r5, #12
 800410a:	bf38      	it	cc
 800410c:	250c      	movcc	r5, #12
 800410e:	2d00      	cmp	r5, #0
 8004110:	4607      	mov	r7, r0
 8004112:	db01      	blt.n	8004118 <_malloc_r+0x1c>
 8004114:	42a9      	cmp	r1, r5
 8004116:	d905      	bls.n	8004124 <_malloc_r+0x28>
 8004118:	230c      	movs	r3, #12
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	2600      	movs	r6, #0
 800411e:	4630      	mov	r0, r6
 8004120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004124:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80041f8 <_malloc_r+0xfc>
 8004128:	f000 f868 	bl	80041fc <__malloc_lock>
 800412c:	f8d8 3000 	ldr.w	r3, [r8]
 8004130:	461c      	mov	r4, r3
 8004132:	bb5c      	cbnz	r4, 800418c <_malloc_r+0x90>
 8004134:	4629      	mov	r1, r5
 8004136:	4638      	mov	r0, r7
 8004138:	f7ff ffc0 	bl	80040bc <sbrk_aligned>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	4604      	mov	r4, r0
 8004140:	d155      	bne.n	80041ee <_malloc_r+0xf2>
 8004142:	f8d8 4000 	ldr.w	r4, [r8]
 8004146:	4626      	mov	r6, r4
 8004148:	2e00      	cmp	r6, #0
 800414a:	d145      	bne.n	80041d8 <_malloc_r+0xdc>
 800414c:	2c00      	cmp	r4, #0
 800414e:	d048      	beq.n	80041e2 <_malloc_r+0xe6>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	4631      	mov	r1, r6
 8004154:	4638      	mov	r0, r7
 8004156:	eb04 0903 	add.w	r9, r4, r3
 800415a:	f000 fc61 	bl	8004a20 <_sbrk_r>
 800415e:	4581      	cmp	r9, r0
 8004160:	d13f      	bne.n	80041e2 <_malloc_r+0xe6>
 8004162:	6821      	ldr	r1, [r4, #0]
 8004164:	1a6d      	subs	r5, r5, r1
 8004166:	4629      	mov	r1, r5
 8004168:	4638      	mov	r0, r7
 800416a:	f7ff ffa7 	bl	80040bc <sbrk_aligned>
 800416e:	3001      	adds	r0, #1
 8004170:	d037      	beq.n	80041e2 <_malloc_r+0xe6>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	442b      	add	r3, r5
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	f8d8 3000 	ldr.w	r3, [r8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d038      	beq.n	80041f2 <_malloc_r+0xf6>
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	42a2      	cmp	r2, r4
 8004184:	d12b      	bne.n	80041de <_malloc_r+0xe2>
 8004186:	2200      	movs	r2, #0
 8004188:	605a      	str	r2, [r3, #4]
 800418a:	e00f      	b.n	80041ac <_malloc_r+0xb0>
 800418c:	6822      	ldr	r2, [r4, #0]
 800418e:	1b52      	subs	r2, r2, r5
 8004190:	d41f      	bmi.n	80041d2 <_malloc_r+0xd6>
 8004192:	2a0b      	cmp	r2, #11
 8004194:	d917      	bls.n	80041c6 <_malloc_r+0xca>
 8004196:	1961      	adds	r1, r4, r5
 8004198:	42a3      	cmp	r3, r4
 800419a:	6025      	str	r5, [r4, #0]
 800419c:	bf18      	it	ne
 800419e:	6059      	strne	r1, [r3, #4]
 80041a0:	6863      	ldr	r3, [r4, #4]
 80041a2:	bf08      	it	eq
 80041a4:	f8c8 1000 	streq.w	r1, [r8]
 80041a8:	5162      	str	r2, [r4, r5]
 80041aa:	604b      	str	r3, [r1, #4]
 80041ac:	4638      	mov	r0, r7
 80041ae:	f104 060b 	add.w	r6, r4, #11
 80041b2:	f000 f829 	bl	8004208 <__malloc_unlock>
 80041b6:	f026 0607 	bic.w	r6, r6, #7
 80041ba:	1d23      	adds	r3, r4, #4
 80041bc:	1af2      	subs	r2, r6, r3
 80041be:	d0ae      	beq.n	800411e <_malloc_r+0x22>
 80041c0:	1b9b      	subs	r3, r3, r6
 80041c2:	50a3      	str	r3, [r4, r2]
 80041c4:	e7ab      	b.n	800411e <_malloc_r+0x22>
 80041c6:	42a3      	cmp	r3, r4
 80041c8:	6862      	ldr	r2, [r4, #4]
 80041ca:	d1dd      	bne.n	8004188 <_malloc_r+0x8c>
 80041cc:	f8c8 2000 	str.w	r2, [r8]
 80041d0:	e7ec      	b.n	80041ac <_malloc_r+0xb0>
 80041d2:	4623      	mov	r3, r4
 80041d4:	6864      	ldr	r4, [r4, #4]
 80041d6:	e7ac      	b.n	8004132 <_malloc_r+0x36>
 80041d8:	4634      	mov	r4, r6
 80041da:	6876      	ldr	r6, [r6, #4]
 80041dc:	e7b4      	b.n	8004148 <_malloc_r+0x4c>
 80041de:	4613      	mov	r3, r2
 80041e0:	e7cc      	b.n	800417c <_malloc_r+0x80>
 80041e2:	230c      	movs	r3, #12
 80041e4:	603b      	str	r3, [r7, #0]
 80041e6:	4638      	mov	r0, r7
 80041e8:	f000 f80e 	bl	8004208 <__malloc_unlock>
 80041ec:	e797      	b.n	800411e <_malloc_r+0x22>
 80041ee:	6025      	str	r5, [r4, #0]
 80041f0:	e7dc      	b.n	80041ac <_malloc_r+0xb0>
 80041f2:	605b      	str	r3, [r3, #4]
 80041f4:	deff      	udf	#255	; 0xff
 80041f6:	bf00      	nop
 80041f8:	20000244 	.word	0x20000244

080041fc <__malloc_lock>:
 80041fc:	4801      	ldr	r0, [pc, #4]	; (8004204 <__malloc_lock+0x8>)
 80041fe:	f7ff bf0e 	b.w	800401e <__retarget_lock_acquire_recursive>
 8004202:	bf00      	nop
 8004204:	20000240 	.word	0x20000240

08004208 <__malloc_unlock>:
 8004208:	4801      	ldr	r0, [pc, #4]	; (8004210 <__malloc_unlock+0x8>)
 800420a:	f7ff bf09 	b.w	8004020 <__retarget_lock_release_recursive>
 800420e:	bf00      	nop
 8004210:	20000240 	.word	0x20000240

08004214 <__sfputc_r>:
 8004214:	6893      	ldr	r3, [r2, #8]
 8004216:	3b01      	subs	r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	b410      	push	{r4}
 800421c:	6093      	str	r3, [r2, #8]
 800421e:	da08      	bge.n	8004232 <__sfputc_r+0x1e>
 8004220:	6994      	ldr	r4, [r2, #24]
 8004222:	42a3      	cmp	r3, r4
 8004224:	db01      	blt.n	800422a <__sfputc_r+0x16>
 8004226:	290a      	cmp	r1, #10
 8004228:	d103      	bne.n	8004232 <__sfputc_r+0x1e>
 800422a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800422e:	f7ff bde8 	b.w	8003e02 <__swbuf_r>
 8004232:	6813      	ldr	r3, [r2, #0]
 8004234:	1c58      	adds	r0, r3, #1
 8004236:	6010      	str	r0, [r2, #0]
 8004238:	7019      	strb	r1, [r3, #0]
 800423a:	4608      	mov	r0, r1
 800423c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004240:	4770      	bx	lr

08004242 <__sfputs_r>:
 8004242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004244:	4606      	mov	r6, r0
 8004246:	460f      	mov	r7, r1
 8004248:	4614      	mov	r4, r2
 800424a:	18d5      	adds	r5, r2, r3
 800424c:	42ac      	cmp	r4, r5
 800424e:	d101      	bne.n	8004254 <__sfputs_r+0x12>
 8004250:	2000      	movs	r0, #0
 8004252:	e007      	b.n	8004264 <__sfputs_r+0x22>
 8004254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004258:	463a      	mov	r2, r7
 800425a:	4630      	mov	r0, r6
 800425c:	f7ff ffda 	bl	8004214 <__sfputc_r>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d1f3      	bne.n	800424c <__sfputs_r+0xa>
 8004264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004268 <_vfiprintf_r>:
 8004268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426c:	460d      	mov	r5, r1
 800426e:	b09d      	sub	sp, #116	; 0x74
 8004270:	4614      	mov	r4, r2
 8004272:	4698      	mov	r8, r3
 8004274:	4606      	mov	r6, r0
 8004276:	b118      	cbz	r0, 8004280 <_vfiprintf_r+0x18>
 8004278:	6a03      	ldr	r3, [r0, #32]
 800427a:	b90b      	cbnz	r3, 8004280 <_vfiprintf_r+0x18>
 800427c:	f7ff fcda 	bl	8003c34 <__sinit>
 8004280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004282:	07d9      	lsls	r1, r3, #31
 8004284:	d405      	bmi.n	8004292 <_vfiprintf_r+0x2a>
 8004286:	89ab      	ldrh	r3, [r5, #12]
 8004288:	059a      	lsls	r2, r3, #22
 800428a:	d402      	bmi.n	8004292 <_vfiprintf_r+0x2a>
 800428c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800428e:	f7ff fec6 	bl	800401e <__retarget_lock_acquire_recursive>
 8004292:	89ab      	ldrh	r3, [r5, #12]
 8004294:	071b      	lsls	r3, r3, #28
 8004296:	d501      	bpl.n	800429c <_vfiprintf_r+0x34>
 8004298:	692b      	ldr	r3, [r5, #16]
 800429a:	b99b      	cbnz	r3, 80042c4 <_vfiprintf_r+0x5c>
 800429c:	4629      	mov	r1, r5
 800429e:	4630      	mov	r0, r6
 80042a0:	f7ff fdec 	bl	8003e7c <__swsetup_r>
 80042a4:	b170      	cbz	r0, 80042c4 <_vfiprintf_r+0x5c>
 80042a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80042a8:	07dc      	lsls	r4, r3, #31
 80042aa:	d504      	bpl.n	80042b6 <_vfiprintf_r+0x4e>
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	b01d      	add	sp, #116	; 0x74
 80042b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b6:	89ab      	ldrh	r3, [r5, #12]
 80042b8:	0598      	lsls	r0, r3, #22
 80042ba:	d4f7      	bmi.n	80042ac <_vfiprintf_r+0x44>
 80042bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80042be:	f7ff feaf 	bl	8004020 <__retarget_lock_release_recursive>
 80042c2:	e7f3      	b.n	80042ac <_vfiprintf_r+0x44>
 80042c4:	2300      	movs	r3, #0
 80042c6:	9309      	str	r3, [sp, #36]	; 0x24
 80042c8:	2320      	movs	r3, #32
 80042ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80042d2:	2330      	movs	r3, #48	; 0x30
 80042d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004488 <_vfiprintf_r+0x220>
 80042d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042dc:	f04f 0901 	mov.w	r9, #1
 80042e0:	4623      	mov	r3, r4
 80042e2:	469a      	mov	sl, r3
 80042e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042e8:	b10a      	cbz	r2, 80042ee <_vfiprintf_r+0x86>
 80042ea:	2a25      	cmp	r2, #37	; 0x25
 80042ec:	d1f9      	bne.n	80042e2 <_vfiprintf_r+0x7a>
 80042ee:	ebba 0b04 	subs.w	fp, sl, r4
 80042f2:	d00b      	beq.n	800430c <_vfiprintf_r+0xa4>
 80042f4:	465b      	mov	r3, fp
 80042f6:	4622      	mov	r2, r4
 80042f8:	4629      	mov	r1, r5
 80042fa:	4630      	mov	r0, r6
 80042fc:	f7ff ffa1 	bl	8004242 <__sfputs_r>
 8004300:	3001      	adds	r0, #1
 8004302:	f000 80a9 	beq.w	8004458 <_vfiprintf_r+0x1f0>
 8004306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004308:	445a      	add	r2, fp
 800430a:	9209      	str	r2, [sp, #36]	; 0x24
 800430c:	f89a 3000 	ldrb.w	r3, [sl]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80a1 	beq.w	8004458 <_vfiprintf_r+0x1f0>
 8004316:	2300      	movs	r3, #0
 8004318:	f04f 32ff 	mov.w	r2, #4294967295
 800431c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004320:	f10a 0a01 	add.w	sl, sl, #1
 8004324:	9304      	str	r3, [sp, #16]
 8004326:	9307      	str	r3, [sp, #28]
 8004328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800432c:	931a      	str	r3, [sp, #104]	; 0x68
 800432e:	4654      	mov	r4, sl
 8004330:	2205      	movs	r2, #5
 8004332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004336:	4854      	ldr	r0, [pc, #336]	; (8004488 <_vfiprintf_r+0x220>)
 8004338:	f7fb ff4a 	bl	80001d0 <memchr>
 800433c:	9a04      	ldr	r2, [sp, #16]
 800433e:	b9d8      	cbnz	r0, 8004378 <_vfiprintf_r+0x110>
 8004340:	06d1      	lsls	r1, r2, #27
 8004342:	bf44      	itt	mi
 8004344:	2320      	movmi	r3, #32
 8004346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800434a:	0713      	lsls	r3, r2, #28
 800434c:	bf44      	itt	mi
 800434e:	232b      	movmi	r3, #43	; 0x2b
 8004350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004354:	f89a 3000 	ldrb.w	r3, [sl]
 8004358:	2b2a      	cmp	r3, #42	; 0x2a
 800435a:	d015      	beq.n	8004388 <_vfiprintf_r+0x120>
 800435c:	9a07      	ldr	r2, [sp, #28]
 800435e:	4654      	mov	r4, sl
 8004360:	2000      	movs	r0, #0
 8004362:	f04f 0c0a 	mov.w	ip, #10
 8004366:	4621      	mov	r1, r4
 8004368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800436c:	3b30      	subs	r3, #48	; 0x30
 800436e:	2b09      	cmp	r3, #9
 8004370:	d94d      	bls.n	800440e <_vfiprintf_r+0x1a6>
 8004372:	b1b0      	cbz	r0, 80043a2 <_vfiprintf_r+0x13a>
 8004374:	9207      	str	r2, [sp, #28]
 8004376:	e014      	b.n	80043a2 <_vfiprintf_r+0x13a>
 8004378:	eba0 0308 	sub.w	r3, r0, r8
 800437c:	fa09 f303 	lsl.w	r3, r9, r3
 8004380:	4313      	orrs	r3, r2
 8004382:	9304      	str	r3, [sp, #16]
 8004384:	46a2      	mov	sl, r4
 8004386:	e7d2      	b.n	800432e <_vfiprintf_r+0xc6>
 8004388:	9b03      	ldr	r3, [sp, #12]
 800438a:	1d19      	adds	r1, r3, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	9103      	str	r1, [sp, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	bfbb      	ittet	lt
 8004394:	425b      	neglt	r3, r3
 8004396:	f042 0202 	orrlt.w	r2, r2, #2
 800439a:	9307      	strge	r3, [sp, #28]
 800439c:	9307      	strlt	r3, [sp, #28]
 800439e:	bfb8      	it	lt
 80043a0:	9204      	strlt	r2, [sp, #16]
 80043a2:	7823      	ldrb	r3, [r4, #0]
 80043a4:	2b2e      	cmp	r3, #46	; 0x2e
 80043a6:	d10c      	bne.n	80043c2 <_vfiprintf_r+0x15a>
 80043a8:	7863      	ldrb	r3, [r4, #1]
 80043aa:	2b2a      	cmp	r3, #42	; 0x2a
 80043ac:	d134      	bne.n	8004418 <_vfiprintf_r+0x1b0>
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	1d1a      	adds	r2, r3, #4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	9203      	str	r2, [sp, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	bfb8      	it	lt
 80043ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80043be:	3402      	adds	r4, #2
 80043c0:	9305      	str	r3, [sp, #20]
 80043c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004498 <_vfiprintf_r+0x230>
 80043c6:	7821      	ldrb	r1, [r4, #0]
 80043c8:	2203      	movs	r2, #3
 80043ca:	4650      	mov	r0, sl
 80043cc:	f7fb ff00 	bl	80001d0 <memchr>
 80043d0:	b138      	cbz	r0, 80043e2 <_vfiprintf_r+0x17a>
 80043d2:	9b04      	ldr	r3, [sp, #16]
 80043d4:	eba0 000a 	sub.w	r0, r0, sl
 80043d8:	2240      	movs	r2, #64	; 0x40
 80043da:	4082      	lsls	r2, r0
 80043dc:	4313      	orrs	r3, r2
 80043de:	3401      	adds	r4, #1
 80043e0:	9304      	str	r3, [sp, #16]
 80043e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043e6:	4829      	ldr	r0, [pc, #164]	; (800448c <_vfiprintf_r+0x224>)
 80043e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043ec:	2206      	movs	r2, #6
 80043ee:	f7fb feef 	bl	80001d0 <memchr>
 80043f2:	2800      	cmp	r0, #0
 80043f4:	d03f      	beq.n	8004476 <_vfiprintf_r+0x20e>
 80043f6:	4b26      	ldr	r3, [pc, #152]	; (8004490 <_vfiprintf_r+0x228>)
 80043f8:	bb1b      	cbnz	r3, 8004442 <_vfiprintf_r+0x1da>
 80043fa:	9b03      	ldr	r3, [sp, #12]
 80043fc:	3307      	adds	r3, #7
 80043fe:	f023 0307 	bic.w	r3, r3, #7
 8004402:	3308      	adds	r3, #8
 8004404:	9303      	str	r3, [sp, #12]
 8004406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004408:	443b      	add	r3, r7
 800440a:	9309      	str	r3, [sp, #36]	; 0x24
 800440c:	e768      	b.n	80042e0 <_vfiprintf_r+0x78>
 800440e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004412:	460c      	mov	r4, r1
 8004414:	2001      	movs	r0, #1
 8004416:	e7a6      	b.n	8004366 <_vfiprintf_r+0xfe>
 8004418:	2300      	movs	r3, #0
 800441a:	3401      	adds	r4, #1
 800441c:	9305      	str	r3, [sp, #20]
 800441e:	4619      	mov	r1, r3
 8004420:	f04f 0c0a 	mov.w	ip, #10
 8004424:	4620      	mov	r0, r4
 8004426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800442a:	3a30      	subs	r2, #48	; 0x30
 800442c:	2a09      	cmp	r2, #9
 800442e:	d903      	bls.n	8004438 <_vfiprintf_r+0x1d0>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0c6      	beq.n	80043c2 <_vfiprintf_r+0x15a>
 8004434:	9105      	str	r1, [sp, #20]
 8004436:	e7c4      	b.n	80043c2 <_vfiprintf_r+0x15a>
 8004438:	fb0c 2101 	mla	r1, ip, r1, r2
 800443c:	4604      	mov	r4, r0
 800443e:	2301      	movs	r3, #1
 8004440:	e7f0      	b.n	8004424 <_vfiprintf_r+0x1bc>
 8004442:	ab03      	add	r3, sp, #12
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	462a      	mov	r2, r5
 8004448:	4b12      	ldr	r3, [pc, #72]	; (8004494 <_vfiprintf_r+0x22c>)
 800444a:	a904      	add	r1, sp, #16
 800444c:	4630      	mov	r0, r6
 800444e:	f3af 8000 	nop.w
 8004452:	4607      	mov	r7, r0
 8004454:	1c78      	adds	r0, r7, #1
 8004456:	d1d6      	bne.n	8004406 <_vfiprintf_r+0x19e>
 8004458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800445a:	07d9      	lsls	r1, r3, #31
 800445c:	d405      	bmi.n	800446a <_vfiprintf_r+0x202>
 800445e:	89ab      	ldrh	r3, [r5, #12]
 8004460:	059a      	lsls	r2, r3, #22
 8004462:	d402      	bmi.n	800446a <_vfiprintf_r+0x202>
 8004464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004466:	f7ff fddb 	bl	8004020 <__retarget_lock_release_recursive>
 800446a:	89ab      	ldrh	r3, [r5, #12]
 800446c:	065b      	lsls	r3, r3, #25
 800446e:	f53f af1d 	bmi.w	80042ac <_vfiprintf_r+0x44>
 8004472:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004474:	e71c      	b.n	80042b0 <_vfiprintf_r+0x48>
 8004476:	ab03      	add	r3, sp, #12
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	462a      	mov	r2, r5
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <_vfiprintf_r+0x22c>)
 800447e:	a904      	add	r1, sp, #16
 8004480:	4630      	mov	r0, r6
 8004482:	f000 f879 	bl	8004578 <_printf_i>
 8004486:	e7e4      	b.n	8004452 <_vfiprintf_r+0x1ea>
 8004488:	08004b04 	.word	0x08004b04
 800448c:	08004b0e 	.word	0x08004b0e
 8004490:	00000000 	.word	0x00000000
 8004494:	08004243 	.word	0x08004243
 8004498:	08004b0a 	.word	0x08004b0a

0800449c <_printf_common>:
 800449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	4616      	mov	r6, r2
 80044a2:	4699      	mov	r9, r3
 80044a4:	688a      	ldr	r2, [r1, #8]
 80044a6:	690b      	ldr	r3, [r1, #16]
 80044a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044ac:	4293      	cmp	r3, r2
 80044ae:	bfb8      	it	lt
 80044b0:	4613      	movlt	r3, r2
 80044b2:	6033      	str	r3, [r6, #0]
 80044b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044b8:	4607      	mov	r7, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	b10a      	cbz	r2, 80044c2 <_printf_common+0x26>
 80044be:	3301      	adds	r3, #1
 80044c0:	6033      	str	r3, [r6, #0]
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	0699      	lsls	r1, r3, #26
 80044c6:	bf42      	ittt	mi
 80044c8:	6833      	ldrmi	r3, [r6, #0]
 80044ca:	3302      	addmi	r3, #2
 80044cc:	6033      	strmi	r3, [r6, #0]
 80044ce:	6825      	ldr	r5, [r4, #0]
 80044d0:	f015 0506 	ands.w	r5, r5, #6
 80044d4:	d106      	bne.n	80044e4 <_printf_common+0x48>
 80044d6:	f104 0a19 	add.w	sl, r4, #25
 80044da:	68e3      	ldr	r3, [r4, #12]
 80044dc:	6832      	ldr	r2, [r6, #0]
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	42ab      	cmp	r3, r5
 80044e2:	dc26      	bgt.n	8004532 <_printf_common+0x96>
 80044e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044e8:	1e13      	subs	r3, r2, #0
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	bf18      	it	ne
 80044ee:	2301      	movne	r3, #1
 80044f0:	0692      	lsls	r2, r2, #26
 80044f2:	d42b      	bmi.n	800454c <_printf_common+0xb0>
 80044f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044f8:	4649      	mov	r1, r9
 80044fa:	4638      	mov	r0, r7
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d01e      	beq.n	8004540 <_printf_common+0xa4>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	6922      	ldr	r2, [r4, #16]
 8004506:	f003 0306 	and.w	r3, r3, #6
 800450a:	2b04      	cmp	r3, #4
 800450c:	bf02      	ittt	eq
 800450e:	68e5      	ldreq	r5, [r4, #12]
 8004510:	6833      	ldreq	r3, [r6, #0]
 8004512:	1aed      	subeq	r5, r5, r3
 8004514:	68a3      	ldr	r3, [r4, #8]
 8004516:	bf0c      	ite	eq
 8004518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800451c:	2500      	movne	r5, #0
 800451e:	4293      	cmp	r3, r2
 8004520:	bfc4      	itt	gt
 8004522:	1a9b      	subgt	r3, r3, r2
 8004524:	18ed      	addgt	r5, r5, r3
 8004526:	2600      	movs	r6, #0
 8004528:	341a      	adds	r4, #26
 800452a:	42b5      	cmp	r5, r6
 800452c:	d11a      	bne.n	8004564 <_printf_common+0xc8>
 800452e:	2000      	movs	r0, #0
 8004530:	e008      	b.n	8004544 <_printf_common+0xa8>
 8004532:	2301      	movs	r3, #1
 8004534:	4652      	mov	r2, sl
 8004536:	4649      	mov	r1, r9
 8004538:	4638      	mov	r0, r7
 800453a:	47c0      	blx	r8
 800453c:	3001      	adds	r0, #1
 800453e:	d103      	bne.n	8004548 <_printf_common+0xac>
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004548:	3501      	adds	r5, #1
 800454a:	e7c6      	b.n	80044da <_printf_common+0x3e>
 800454c:	18e1      	adds	r1, r4, r3
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	2030      	movs	r0, #48	; 0x30
 8004552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004556:	4422      	add	r2, r4
 8004558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800455c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004560:	3302      	adds	r3, #2
 8004562:	e7c7      	b.n	80044f4 <_printf_common+0x58>
 8004564:	2301      	movs	r3, #1
 8004566:	4622      	mov	r2, r4
 8004568:	4649      	mov	r1, r9
 800456a:	4638      	mov	r0, r7
 800456c:	47c0      	blx	r8
 800456e:	3001      	adds	r0, #1
 8004570:	d0e6      	beq.n	8004540 <_printf_common+0xa4>
 8004572:	3601      	adds	r6, #1
 8004574:	e7d9      	b.n	800452a <_printf_common+0x8e>
	...

08004578 <_printf_i>:
 8004578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	7e0f      	ldrb	r7, [r1, #24]
 800457e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004580:	2f78      	cmp	r7, #120	; 0x78
 8004582:	4691      	mov	r9, r2
 8004584:	4680      	mov	r8, r0
 8004586:	460c      	mov	r4, r1
 8004588:	469a      	mov	sl, r3
 800458a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800458e:	d807      	bhi.n	80045a0 <_printf_i+0x28>
 8004590:	2f62      	cmp	r7, #98	; 0x62
 8004592:	d80a      	bhi.n	80045aa <_printf_i+0x32>
 8004594:	2f00      	cmp	r7, #0
 8004596:	f000 80d4 	beq.w	8004742 <_printf_i+0x1ca>
 800459a:	2f58      	cmp	r7, #88	; 0x58
 800459c:	f000 80c0 	beq.w	8004720 <_printf_i+0x1a8>
 80045a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045a8:	e03a      	b.n	8004620 <_printf_i+0xa8>
 80045aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045ae:	2b15      	cmp	r3, #21
 80045b0:	d8f6      	bhi.n	80045a0 <_printf_i+0x28>
 80045b2:	a101      	add	r1, pc, #4	; (adr r1, 80045b8 <_printf_i+0x40>)
 80045b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045b8:	08004611 	.word	0x08004611
 80045bc:	08004625 	.word	0x08004625
 80045c0:	080045a1 	.word	0x080045a1
 80045c4:	080045a1 	.word	0x080045a1
 80045c8:	080045a1 	.word	0x080045a1
 80045cc:	080045a1 	.word	0x080045a1
 80045d0:	08004625 	.word	0x08004625
 80045d4:	080045a1 	.word	0x080045a1
 80045d8:	080045a1 	.word	0x080045a1
 80045dc:	080045a1 	.word	0x080045a1
 80045e0:	080045a1 	.word	0x080045a1
 80045e4:	08004729 	.word	0x08004729
 80045e8:	08004651 	.word	0x08004651
 80045ec:	080046e3 	.word	0x080046e3
 80045f0:	080045a1 	.word	0x080045a1
 80045f4:	080045a1 	.word	0x080045a1
 80045f8:	0800474b 	.word	0x0800474b
 80045fc:	080045a1 	.word	0x080045a1
 8004600:	08004651 	.word	0x08004651
 8004604:	080045a1 	.word	0x080045a1
 8004608:	080045a1 	.word	0x080045a1
 800460c:	080046eb 	.word	0x080046eb
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	1d1a      	adds	r2, r3, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	602a      	str	r2, [r5, #0]
 8004618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800461c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004620:	2301      	movs	r3, #1
 8004622:	e09f      	b.n	8004764 <_printf_i+0x1ec>
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	682b      	ldr	r3, [r5, #0]
 8004628:	0607      	lsls	r7, r0, #24
 800462a:	f103 0104 	add.w	r1, r3, #4
 800462e:	6029      	str	r1, [r5, #0]
 8004630:	d501      	bpl.n	8004636 <_printf_i+0xbe>
 8004632:	681e      	ldr	r6, [r3, #0]
 8004634:	e003      	b.n	800463e <_printf_i+0xc6>
 8004636:	0646      	lsls	r6, r0, #25
 8004638:	d5fb      	bpl.n	8004632 <_printf_i+0xba>
 800463a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800463e:	2e00      	cmp	r6, #0
 8004640:	da03      	bge.n	800464a <_printf_i+0xd2>
 8004642:	232d      	movs	r3, #45	; 0x2d
 8004644:	4276      	negs	r6, r6
 8004646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800464a:	485a      	ldr	r0, [pc, #360]	; (80047b4 <_printf_i+0x23c>)
 800464c:	230a      	movs	r3, #10
 800464e:	e012      	b.n	8004676 <_printf_i+0xfe>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	1d19      	adds	r1, r3, #4
 8004656:	6029      	str	r1, [r5, #0]
 8004658:	0605      	lsls	r5, r0, #24
 800465a:	d501      	bpl.n	8004660 <_printf_i+0xe8>
 800465c:	681e      	ldr	r6, [r3, #0]
 800465e:	e002      	b.n	8004666 <_printf_i+0xee>
 8004660:	0641      	lsls	r1, r0, #25
 8004662:	d5fb      	bpl.n	800465c <_printf_i+0xe4>
 8004664:	881e      	ldrh	r6, [r3, #0]
 8004666:	4853      	ldr	r0, [pc, #332]	; (80047b4 <_printf_i+0x23c>)
 8004668:	2f6f      	cmp	r7, #111	; 0x6f
 800466a:	bf0c      	ite	eq
 800466c:	2308      	moveq	r3, #8
 800466e:	230a      	movne	r3, #10
 8004670:	2100      	movs	r1, #0
 8004672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004676:	6865      	ldr	r5, [r4, #4]
 8004678:	60a5      	str	r5, [r4, #8]
 800467a:	2d00      	cmp	r5, #0
 800467c:	bfa2      	ittt	ge
 800467e:	6821      	ldrge	r1, [r4, #0]
 8004680:	f021 0104 	bicge.w	r1, r1, #4
 8004684:	6021      	strge	r1, [r4, #0]
 8004686:	b90e      	cbnz	r6, 800468c <_printf_i+0x114>
 8004688:	2d00      	cmp	r5, #0
 800468a:	d04b      	beq.n	8004724 <_printf_i+0x1ac>
 800468c:	4615      	mov	r5, r2
 800468e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004692:	fb03 6711 	mls	r7, r3, r1, r6
 8004696:	5dc7      	ldrb	r7, [r0, r7]
 8004698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800469c:	4637      	mov	r7, r6
 800469e:	42bb      	cmp	r3, r7
 80046a0:	460e      	mov	r6, r1
 80046a2:	d9f4      	bls.n	800468e <_printf_i+0x116>
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d10b      	bne.n	80046c0 <_printf_i+0x148>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	07de      	lsls	r6, r3, #31
 80046ac:	d508      	bpl.n	80046c0 <_printf_i+0x148>
 80046ae:	6923      	ldr	r3, [r4, #16]
 80046b0:	6861      	ldr	r1, [r4, #4]
 80046b2:	4299      	cmp	r1, r3
 80046b4:	bfde      	ittt	le
 80046b6:	2330      	movle	r3, #48	; 0x30
 80046b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046c0:	1b52      	subs	r2, r2, r5
 80046c2:	6122      	str	r2, [r4, #16]
 80046c4:	f8cd a000 	str.w	sl, [sp]
 80046c8:	464b      	mov	r3, r9
 80046ca:	aa03      	add	r2, sp, #12
 80046cc:	4621      	mov	r1, r4
 80046ce:	4640      	mov	r0, r8
 80046d0:	f7ff fee4 	bl	800449c <_printf_common>
 80046d4:	3001      	adds	r0, #1
 80046d6:	d14a      	bne.n	800476e <_printf_i+0x1f6>
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	b004      	add	sp, #16
 80046de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e2:	6823      	ldr	r3, [r4, #0]
 80046e4:	f043 0320 	orr.w	r3, r3, #32
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	4833      	ldr	r0, [pc, #204]	; (80047b8 <_printf_i+0x240>)
 80046ec:	2778      	movs	r7, #120	; 0x78
 80046ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	6829      	ldr	r1, [r5, #0]
 80046f6:	061f      	lsls	r7, r3, #24
 80046f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80046fc:	d402      	bmi.n	8004704 <_printf_i+0x18c>
 80046fe:	065f      	lsls	r7, r3, #25
 8004700:	bf48      	it	mi
 8004702:	b2b6      	uxthmi	r6, r6
 8004704:	07df      	lsls	r7, r3, #31
 8004706:	bf48      	it	mi
 8004708:	f043 0320 	orrmi.w	r3, r3, #32
 800470c:	6029      	str	r1, [r5, #0]
 800470e:	bf48      	it	mi
 8004710:	6023      	strmi	r3, [r4, #0]
 8004712:	b91e      	cbnz	r6, 800471c <_printf_i+0x1a4>
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	f023 0320 	bic.w	r3, r3, #32
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	2310      	movs	r3, #16
 800471e:	e7a7      	b.n	8004670 <_printf_i+0xf8>
 8004720:	4824      	ldr	r0, [pc, #144]	; (80047b4 <_printf_i+0x23c>)
 8004722:	e7e4      	b.n	80046ee <_printf_i+0x176>
 8004724:	4615      	mov	r5, r2
 8004726:	e7bd      	b.n	80046a4 <_printf_i+0x12c>
 8004728:	682b      	ldr	r3, [r5, #0]
 800472a:	6826      	ldr	r6, [r4, #0]
 800472c:	6961      	ldr	r1, [r4, #20]
 800472e:	1d18      	adds	r0, r3, #4
 8004730:	6028      	str	r0, [r5, #0]
 8004732:	0635      	lsls	r5, r6, #24
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	d501      	bpl.n	800473c <_printf_i+0x1c4>
 8004738:	6019      	str	r1, [r3, #0]
 800473a:	e002      	b.n	8004742 <_printf_i+0x1ca>
 800473c:	0670      	lsls	r0, r6, #25
 800473e:	d5fb      	bpl.n	8004738 <_printf_i+0x1c0>
 8004740:	8019      	strh	r1, [r3, #0]
 8004742:	2300      	movs	r3, #0
 8004744:	6123      	str	r3, [r4, #16]
 8004746:	4615      	mov	r5, r2
 8004748:	e7bc      	b.n	80046c4 <_printf_i+0x14c>
 800474a:	682b      	ldr	r3, [r5, #0]
 800474c:	1d1a      	adds	r2, r3, #4
 800474e:	602a      	str	r2, [r5, #0]
 8004750:	681d      	ldr	r5, [r3, #0]
 8004752:	6862      	ldr	r2, [r4, #4]
 8004754:	2100      	movs	r1, #0
 8004756:	4628      	mov	r0, r5
 8004758:	f7fb fd3a 	bl	80001d0 <memchr>
 800475c:	b108      	cbz	r0, 8004762 <_printf_i+0x1ea>
 800475e:	1b40      	subs	r0, r0, r5
 8004760:	6060      	str	r0, [r4, #4]
 8004762:	6863      	ldr	r3, [r4, #4]
 8004764:	6123      	str	r3, [r4, #16]
 8004766:	2300      	movs	r3, #0
 8004768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800476c:	e7aa      	b.n	80046c4 <_printf_i+0x14c>
 800476e:	6923      	ldr	r3, [r4, #16]
 8004770:	462a      	mov	r2, r5
 8004772:	4649      	mov	r1, r9
 8004774:	4640      	mov	r0, r8
 8004776:	47d0      	blx	sl
 8004778:	3001      	adds	r0, #1
 800477a:	d0ad      	beq.n	80046d8 <_printf_i+0x160>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	079b      	lsls	r3, r3, #30
 8004780:	d413      	bmi.n	80047aa <_printf_i+0x232>
 8004782:	68e0      	ldr	r0, [r4, #12]
 8004784:	9b03      	ldr	r3, [sp, #12]
 8004786:	4298      	cmp	r0, r3
 8004788:	bfb8      	it	lt
 800478a:	4618      	movlt	r0, r3
 800478c:	e7a6      	b.n	80046dc <_printf_i+0x164>
 800478e:	2301      	movs	r3, #1
 8004790:	4632      	mov	r2, r6
 8004792:	4649      	mov	r1, r9
 8004794:	4640      	mov	r0, r8
 8004796:	47d0      	blx	sl
 8004798:	3001      	adds	r0, #1
 800479a:	d09d      	beq.n	80046d8 <_printf_i+0x160>
 800479c:	3501      	adds	r5, #1
 800479e:	68e3      	ldr	r3, [r4, #12]
 80047a0:	9903      	ldr	r1, [sp, #12]
 80047a2:	1a5b      	subs	r3, r3, r1
 80047a4:	42ab      	cmp	r3, r5
 80047a6:	dcf2      	bgt.n	800478e <_printf_i+0x216>
 80047a8:	e7eb      	b.n	8004782 <_printf_i+0x20a>
 80047aa:	2500      	movs	r5, #0
 80047ac:	f104 0619 	add.w	r6, r4, #25
 80047b0:	e7f5      	b.n	800479e <_printf_i+0x226>
 80047b2:	bf00      	nop
 80047b4:	08004b15 	.word	0x08004b15
 80047b8:	08004b26 	.word	0x08004b26

080047bc <__sflush_r>:
 80047bc:	898a      	ldrh	r2, [r1, #12]
 80047be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c2:	4605      	mov	r5, r0
 80047c4:	0710      	lsls	r0, r2, #28
 80047c6:	460c      	mov	r4, r1
 80047c8:	d458      	bmi.n	800487c <__sflush_r+0xc0>
 80047ca:	684b      	ldr	r3, [r1, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	dc05      	bgt.n	80047dc <__sflush_r+0x20>
 80047d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dc02      	bgt.n	80047dc <__sflush_r+0x20>
 80047d6:	2000      	movs	r0, #0
 80047d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047de:	2e00      	cmp	r6, #0
 80047e0:	d0f9      	beq.n	80047d6 <__sflush_r+0x1a>
 80047e2:	2300      	movs	r3, #0
 80047e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047e8:	682f      	ldr	r7, [r5, #0]
 80047ea:	6a21      	ldr	r1, [r4, #32]
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	d032      	beq.n	8004856 <__sflush_r+0x9a>
 80047f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	075a      	lsls	r2, r3, #29
 80047f6:	d505      	bpl.n	8004804 <__sflush_r+0x48>
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	1ac0      	subs	r0, r0, r3
 80047fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047fe:	b10b      	cbz	r3, 8004804 <__sflush_r+0x48>
 8004800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004802:	1ac0      	subs	r0, r0, r3
 8004804:	2300      	movs	r3, #0
 8004806:	4602      	mov	r2, r0
 8004808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800480a:	6a21      	ldr	r1, [r4, #32]
 800480c:	4628      	mov	r0, r5
 800480e:	47b0      	blx	r6
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	d106      	bne.n	8004824 <__sflush_r+0x68>
 8004816:	6829      	ldr	r1, [r5, #0]
 8004818:	291d      	cmp	r1, #29
 800481a:	d82b      	bhi.n	8004874 <__sflush_r+0xb8>
 800481c:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <__sflush_r+0x108>)
 800481e:	410a      	asrs	r2, r1
 8004820:	07d6      	lsls	r6, r2, #31
 8004822:	d427      	bmi.n	8004874 <__sflush_r+0xb8>
 8004824:	2200      	movs	r2, #0
 8004826:	6062      	str	r2, [r4, #4]
 8004828:	04d9      	lsls	r1, r3, #19
 800482a:	6922      	ldr	r2, [r4, #16]
 800482c:	6022      	str	r2, [r4, #0]
 800482e:	d504      	bpl.n	800483a <__sflush_r+0x7e>
 8004830:	1c42      	adds	r2, r0, #1
 8004832:	d101      	bne.n	8004838 <__sflush_r+0x7c>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b903      	cbnz	r3, 800483a <__sflush_r+0x7e>
 8004838:	6560      	str	r0, [r4, #84]	; 0x54
 800483a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800483c:	602f      	str	r7, [r5, #0]
 800483e:	2900      	cmp	r1, #0
 8004840:	d0c9      	beq.n	80047d6 <__sflush_r+0x1a>
 8004842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004846:	4299      	cmp	r1, r3
 8004848:	d002      	beq.n	8004850 <__sflush_r+0x94>
 800484a:	4628      	mov	r0, r5
 800484c:	f7ff fbea 	bl	8004024 <_free_r>
 8004850:	2000      	movs	r0, #0
 8004852:	6360      	str	r0, [r4, #52]	; 0x34
 8004854:	e7c0      	b.n	80047d8 <__sflush_r+0x1c>
 8004856:	2301      	movs	r3, #1
 8004858:	4628      	mov	r0, r5
 800485a:	47b0      	blx	r6
 800485c:	1c41      	adds	r1, r0, #1
 800485e:	d1c8      	bne.n	80047f2 <__sflush_r+0x36>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0c5      	beq.n	80047f2 <__sflush_r+0x36>
 8004866:	2b1d      	cmp	r3, #29
 8004868:	d001      	beq.n	800486e <__sflush_r+0xb2>
 800486a:	2b16      	cmp	r3, #22
 800486c:	d101      	bne.n	8004872 <__sflush_r+0xb6>
 800486e:	602f      	str	r7, [r5, #0]
 8004870:	e7b1      	b.n	80047d6 <__sflush_r+0x1a>
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	e7ad      	b.n	80047d8 <__sflush_r+0x1c>
 800487c:	690f      	ldr	r7, [r1, #16]
 800487e:	2f00      	cmp	r7, #0
 8004880:	d0a9      	beq.n	80047d6 <__sflush_r+0x1a>
 8004882:	0793      	lsls	r3, r2, #30
 8004884:	680e      	ldr	r6, [r1, #0]
 8004886:	bf08      	it	eq
 8004888:	694b      	ldreq	r3, [r1, #20]
 800488a:	600f      	str	r7, [r1, #0]
 800488c:	bf18      	it	ne
 800488e:	2300      	movne	r3, #0
 8004890:	eba6 0807 	sub.w	r8, r6, r7
 8004894:	608b      	str	r3, [r1, #8]
 8004896:	f1b8 0f00 	cmp.w	r8, #0
 800489a:	dd9c      	ble.n	80047d6 <__sflush_r+0x1a>
 800489c:	6a21      	ldr	r1, [r4, #32]
 800489e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048a0:	4643      	mov	r3, r8
 80048a2:	463a      	mov	r2, r7
 80048a4:	4628      	mov	r0, r5
 80048a6:	47b0      	blx	r6
 80048a8:	2800      	cmp	r0, #0
 80048aa:	dc06      	bgt.n	80048ba <__sflush_r+0xfe>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b2:	81a3      	strh	r3, [r4, #12]
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	e78e      	b.n	80047d8 <__sflush_r+0x1c>
 80048ba:	4407      	add	r7, r0
 80048bc:	eba8 0800 	sub.w	r8, r8, r0
 80048c0:	e7e9      	b.n	8004896 <__sflush_r+0xda>
 80048c2:	bf00      	nop
 80048c4:	dfbffffe 	.word	0xdfbffffe

080048c8 <_fflush_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	690b      	ldr	r3, [r1, #16]
 80048cc:	4605      	mov	r5, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	b913      	cbnz	r3, 80048d8 <_fflush_r+0x10>
 80048d2:	2500      	movs	r5, #0
 80048d4:	4628      	mov	r0, r5
 80048d6:	bd38      	pop	{r3, r4, r5, pc}
 80048d8:	b118      	cbz	r0, 80048e2 <_fflush_r+0x1a>
 80048da:	6a03      	ldr	r3, [r0, #32]
 80048dc:	b90b      	cbnz	r3, 80048e2 <_fflush_r+0x1a>
 80048de:	f7ff f9a9 	bl	8003c34 <__sinit>
 80048e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f3      	beq.n	80048d2 <_fflush_r+0xa>
 80048ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048ec:	07d0      	lsls	r0, r2, #31
 80048ee:	d404      	bmi.n	80048fa <_fflush_r+0x32>
 80048f0:	0599      	lsls	r1, r3, #22
 80048f2:	d402      	bmi.n	80048fa <_fflush_r+0x32>
 80048f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048f6:	f7ff fb92 	bl	800401e <__retarget_lock_acquire_recursive>
 80048fa:	4628      	mov	r0, r5
 80048fc:	4621      	mov	r1, r4
 80048fe:	f7ff ff5d 	bl	80047bc <__sflush_r>
 8004902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004904:	07da      	lsls	r2, r3, #31
 8004906:	4605      	mov	r5, r0
 8004908:	d4e4      	bmi.n	80048d4 <_fflush_r+0xc>
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	059b      	lsls	r3, r3, #22
 800490e:	d4e1      	bmi.n	80048d4 <_fflush_r+0xc>
 8004910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004912:	f7ff fb85 	bl	8004020 <__retarget_lock_release_recursive>
 8004916:	e7dd      	b.n	80048d4 <_fflush_r+0xc>

08004918 <__swhatbuf_r>:
 8004918:	b570      	push	{r4, r5, r6, lr}
 800491a:	460c      	mov	r4, r1
 800491c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004920:	2900      	cmp	r1, #0
 8004922:	b096      	sub	sp, #88	; 0x58
 8004924:	4615      	mov	r5, r2
 8004926:	461e      	mov	r6, r3
 8004928:	da0d      	bge.n	8004946 <__swhatbuf_r+0x2e>
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004930:	f04f 0100 	mov.w	r1, #0
 8004934:	bf0c      	ite	eq
 8004936:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800493a:	2340      	movne	r3, #64	; 0x40
 800493c:	2000      	movs	r0, #0
 800493e:	6031      	str	r1, [r6, #0]
 8004940:	602b      	str	r3, [r5, #0]
 8004942:	b016      	add	sp, #88	; 0x58
 8004944:	bd70      	pop	{r4, r5, r6, pc}
 8004946:	466a      	mov	r2, sp
 8004948:	f000 f848 	bl	80049dc <_fstat_r>
 800494c:	2800      	cmp	r0, #0
 800494e:	dbec      	blt.n	800492a <__swhatbuf_r+0x12>
 8004950:	9901      	ldr	r1, [sp, #4]
 8004952:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004956:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800495a:	4259      	negs	r1, r3
 800495c:	4159      	adcs	r1, r3
 800495e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004962:	e7eb      	b.n	800493c <__swhatbuf_r+0x24>

08004964 <__smakebuf_r>:
 8004964:	898b      	ldrh	r3, [r1, #12]
 8004966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004968:	079d      	lsls	r5, r3, #30
 800496a:	4606      	mov	r6, r0
 800496c:	460c      	mov	r4, r1
 800496e:	d507      	bpl.n	8004980 <__smakebuf_r+0x1c>
 8004970:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004974:	6023      	str	r3, [r4, #0]
 8004976:	6123      	str	r3, [r4, #16]
 8004978:	2301      	movs	r3, #1
 800497a:	6163      	str	r3, [r4, #20]
 800497c:	b002      	add	sp, #8
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	ab01      	add	r3, sp, #4
 8004982:	466a      	mov	r2, sp
 8004984:	f7ff ffc8 	bl	8004918 <__swhatbuf_r>
 8004988:	9900      	ldr	r1, [sp, #0]
 800498a:	4605      	mov	r5, r0
 800498c:	4630      	mov	r0, r6
 800498e:	f7ff fbb5 	bl	80040fc <_malloc_r>
 8004992:	b948      	cbnz	r0, 80049a8 <__smakebuf_r+0x44>
 8004994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004998:	059a      	lsls	r2, r3, #22
 800499a:	d4ef      	bmi.n	800497c <__smakebuf_r+0x18>
 800499c:	f023 0303 	bic.w	r3, r3, #3
 80049a0:	f043 0302 	orr.w	r3, r3, #2
 80049a4:	81a3      	strh	r3, [r4, #12]
 80049a6:	e7e3      	b.n	8004970 <__smakebuf_r+0xc>
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	6020      	str	r0, [r4, #0]
 80049ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b0:	81a3      	strh	r3, [r4, #12]
 80049b2:	9b00      	ldr	r3, [sp, #0]
 80049b4:	6163      	str	r3, [r4, #20]
 80049b6:	9b01      	ldr	r3, [sp, #4]
 80049b8:	6120      	str	r0, [r4, #16]
 80049ba:	b15b      	cbz	r3, 80049d4 <__smakebuf_r+0x70>
 80049bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049c0:	4630      	mov	r0, r6
 80049c2:	f000 f81d 	bl	8004a00 <_isatty_r>
 80049c6:	b128      	cbz	r0, 80049d4 <__smakebuf_r+0x70>
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	81a3      	strh	r3, [r4, #12]
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	431d      	orrs	r5, r3
 80049d8:	81a5      	strh	r5, [r4, #12]
 80049da:	e7cf      	b.n	800497c <__smakebuf_r+0x18>

080049dc <_fstat_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4d07      	ldr	r5, [pc, #28]	; (80049fc <_fstat_r+0x20>)
 80049e0:	2300      	movs	r3, #0
 80049e2:	4604      	mov	r4, r0
 80049e4:	4608      	mov	r0, r1
 80049e6:	4611      	mov	r1, r2
 80049e8:	602b      	str	r3, [r5, #0]
 80049ea:	f7fc fdce 	bl	800158a <_fstat>
 80049ee:	1c43      	adds	r3, r0, #1
 80049f0:	d102      	bne.n	80049f8 <_fstat_r+0x1c>
 80049f2:	682b      	ldr	r3, [r5, #0]
 80049f4:	b103      	cbz	r3, 80049f8 <_fstat_r+0x1c>
 80049f6:	6023      	str	r3, [r4, #0]
 80049f8:	bd38      	pop	{r3, r4, r5, pc}
 80049fa:	bf00      	nop
 80049fc:	2000023c 	.word	0x2000023c

08004a00 <_isatty_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4d06      	ldr	r5, [pc, #24]	; (8004a1c <_isatty_r+0x1c>)
 8004a04:	2300      	movs	r3, #0
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	602b      	str	r3, [r5, #0]
 8004a0c:	f7fc fdcd 	bl	80015aa <_isatty>
 8004a10:	1c43      	adds	r3, r0, #1
 8004a12:	d102      	bne.n	8004a1a <_isatty_r+0x1a>
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	b103      	cbz	r3, 8004a1a <_isatty_r+0x1a>
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	bd38      	pop	{r3, r4, r5, pc}
 8004a1c:	2000023c 	.word	0x2000023c

08004a20 <_sbrk_r>:
 8004a20:	b538      	push	{r3, r4, r5, lr}
 8004a22:	4d06      	ldr	r5, [pc, #24]	; (8004a3c <_sbrk_r+0x1c>)
 8004a24:	2300      	movs	r3, #0
 8004a26:	4604      	mov	r4, r0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	602b      	str	r3, [r5, #0]
 8004a2c:	f7fc fdd6 	bl	80015dc <_sbrk>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_sbrk_r+0x1a>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_sbrk_r+0x1a>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	2000023c 	.word	0x2000023c

08004a40 <_init>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr

08004a4c <_fini>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr
